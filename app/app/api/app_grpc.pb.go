// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: app/app/api/app.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppClient is the client API for App service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppClient interface {
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoReply, error)
	RewardList(ctx context.Context, in *RewardListRequest, opts ...grpc.CallOption) (*RewardListReply, error)
	RecommendRewardList(ctx context.Context, in *RecommendRewardListRequest, opts ...grpc.CallOption) (*RecommendRewardListReply, error)
	FeeRewardList(ctx context.Context, in *FeeRewardListRequest, opts ...grpc.CallOption) (*FeeRewardListReply, error)
	WithdrawList(ctx context.Context, in *WithdrawListRequest, opts ...grpc.CallOption) (*WithdrawListReply, error)
	RecommendList(ctx context.Context, in *RecommendListRequest, opts ...grpc.CallOption) (*RecommendListReply, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawReply, error)
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositReply, error)
	Deposit3(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositReply, error)
	Deposit4(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositReply, error)
	VipCheck(ctx context.Context, in *VipCheckRequest, opts ...grpc.CallOption) (*VipCheckReply, error)
	Deposit2(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositReply, error)
	AdminRewardList(ctx context.Context, in *AdminRewardListRequest, opts ...grpc.CallOption) (*AdminRewardListReply, error)
	AdminTradeList(ctx context.Context, in *AdminTradeListRequest, opts ...grpc.CallOption) (*AdminTradeListReply, error)
	LockSystem(ctx context.Context, in *LockSystemRequest, opts ...grpc.CallOption) (*LockSystemReply, error)
	AdminUserList(ctx context.Context, in *AdminUserListRequest, opts ...grpc.CallOption) (*AdminUserListReply, error)
	CheckAdminUserArea(ctx context.Context, in *CheckAdminUserAreaRequest, opts ...grpc.CallOption) (*CheckAdminUserAreaReply, error)
	CheckAndInsertLocationsRecommendUser(ctx context.Context, in *CheckAndInsertLocationsRecommendUserRequest, opts ...grpc.CallOption) (*CheckAndInsertLocationsRecommendUserReply, error)
	AdminLocationList(ctx context.Context, in *AdminLocationListRequest, opts ...grpc.CallOption) (*AdminLocationListReply, error)
	AdminRecordList(ctx context.Context, in *RecordListRequest, opts ...grpc.CallOption) (*RecordListReply, error)
	AdminLocationAllList(ctx context.Context, in *AdminLocationAllListRequest, opts ...grpc.CallOption) (*AdminLocationAllListReply, error)
	AdminWithdrawList(ctx context.Context, in *AdminWithdrawListRequest, opts ...grpc.CallOption) (*AdminWithdrawListReply, error)
	AdminWithdraw(ctx context.Context, in *AdminWithdrawRequest, opts ...grpc.CallOption) (*AdminWithdrawReply, error)
	AdminTrade(ctx context.Context, in *AdminTradeRequest, opts ...grpc.CallOption) (*AdminTradeReply, error)
	AdminWithdrawPass(ctx context.Context, in *AdminWithdrawPassRequest, opts ...grpc.CallOption) (*AdminWithdrawPassReply, error)
	AdminWithdrawEth(ctx context.Context, in *AdminWithdrawEthRequest, opts ...grpc.CallOption) (*AdminWithdrawEthReply, error)
	AdminFee(ctx context.Context, in *AdminFeeRequest, opts ...grpc.CallOption) (*AdminFeeReply, error)
	AdminDailyFee(ctx context.Context, in *AdminDailyFeeRequest, opts ...grpc.CallOption) (*AdminDailyFeeReply, error)
	AdminAll(ctx context.Context, in *AdminAllRequest, opts ...grpc.CallOption) (*AdminAllReply, error)
	AdminUserRecommend(ctx context.Context, in *AdminUserRecommendRequest, opts ...grpc.CallOption) (*AdminUserRecommendReply, error)
	AdminMonthRecommend(ctx context.Context, in *AdminMonthRecommendRequest, opts ...grpc.CallOption) (*AdminMonthRecommendReply, error)
	AdminConfig(ctx context.Context, in *AdminConfigRequest, opts ...grpc.CallOption) (*AdminConfigReply, error)
	AdminConfigUpdate(ctx context.Context, in *AdminConfigUpdateRequest, opts ...grpc.CallOption) (*AdminConfigUpdateReply, error)
	AdminUserPasswordUpdate(ctx context.Context, in *AdminPasswordUpdateRequest, opts ...grpc.CallOption) (*AdminPasswordUpdateReply, error)
	AdminUpdateLocationNewMax(ctx context.Context, in *AdminUpdateLocationNewMaxRequest, opts ...grpc.CallOption) (*AdminUpdateLocationNewMaxReply, error)
	AdminVipUpdate(ctx context.Context, in *AdminVipUpdateRequest, opts ...grpc.CallOption) (*AdminVipUpdateReply, error)
	AdminUndoUpdate(ctx context.Context, in *AdminUndoUpdateRequest, opts ...grpc.CallOption) (*AdminUndoUpdateReply, error)
	AdminAreaLevelUpdate(ctx context.Context, in *AdminAreaLevelUpdateRequest, opts ...grpc.CallOption) (*AdminAreaLevelUpdateReply, error)
	AdminLocationInsert(ctx context.Context, in *AdminLocationInsertRequest, opts ...grpc.CallOption) (*AdminLocationInsertReply, error)
	AdminBalanceUpdate(ctx context.Context, in *AdminBalanceUpdateRequest, opts ...grpc.CallOption) (*AdminBalanceUpdateReply, error)
	AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginReply, error)
	AdminCreateAccount(ctx context.Context, in *AdminCreateAccountRequest, opts ...grpc.CallOption) (*AdminCreateAccountReply, error)
	AdminChangePassword(ctx context.Context, in *AdminChangePasswordRequest, opts ...grpc.CallOption) (*AdminChangePasswordReply, error)
	AdminList(ctx context.Context, in *AdminListRequest, opts ...grpc.CallOption) (*AdminListReply, error)
	AuthList(ctx context.Context, in *AuthListRequest, opts ...grpc.CallOption) (*AuthListReply, error)
	MyAuthList(ctx context.Context, in *MyAuthListRequest, opts ...grpc.CallOption) (*MyAuthListReply, error)
	UserAuthList(ctx context.Context, in *UserAuthListRequest, opts ...grpc.CallOption) (*UserAuthListReply, error)
	AuthAdminCreate(ctx context.Context, in *AuthAdminCreateRequest, opts ...grpc.CallOption) (*AuthAdminCreateReply, error)
	AuthAdminDelete(ctx context.Context, in *AuthAdminDeleteRequest, opts ...grpc.CallOption) (*AuthAdminDeleteReply, error)
	CheckAndInsertRecommendArea(ctx context.Context, in *CheckAndInsertRecommendAreaRequest, opts ...grpc.CallOption) (*CheckAndInsertRecommendAreaReply, error)
	AdminDailyRecommendReward(ctx context.Context, in *AdminDailyRecommendRewardRequest, opts ...grpc.CallOption) (*AdminDailyRecommendRewardReply, error)
	AdminDailyBalanceReward(ctx context.Context, in *AdminDailyBalanceRewardRequest, opts ...grpc.CallOption) (*AdminDailyBalanceRewardReply, error)
	AdminDailyLocationReward(ctx context.Context, in *AdminDailyLocationRewardRequest, opts ...grpc.CallOption) (*AdminDailyLocationRewardReply, error)
	AdminDailyLocationRewardNew(ctx context.Context, in *AdminDailyLocationRewardNewRequest, opts ...grpc.CallOption) (*AdminDailyLocationRewardNewReply, error)
}

type appClient struct {
	cc grpc.ClientConnInterface
}

func NewAppClient(cc grpc.ClientConnInterface) AppClient {
	return &appClient{cc}
}

func (c *appClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoReply, error) {
	out := new(UserInfoReply)
	err := c.cc.Invoke(ctx, "/api.App/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) RewardList(ctx context.Context, in *RewardListRequest, opts ...grpc.CallOption) (*RewardListReply, error) {
	out := new(RewardListReply)
	err := c.cc.Invoke(ctx, "/api.App/RewardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) RecommendRewardList(ctx context.Context, in *RecommendRewardListRequest, opts ...grpc.CallOption) (*RecommendRewardListReply, error) {
	out := new(RecommendRewardListReply)
	err := c.cc.Invoke(ctx, "/api.App/RecommendRewardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) FeeRewardList(ctx context.Context, in *FeeRewardListRequest, opts ...grpc.CallOption) (*FeeRewardListReply, error) {
	out := new(FeeRewardListReply)
	err := c.cc.Invoke(ctx, "/api.App/FeeRewardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) WithdrawList(ctx context.Context, in *WithdrawListRequest, opts ...grpc.CallOption) (*WithdrawListReply, error) {
	out := new(WithdrawListReply)
	err := c.cc.Invoke(ctx, "/api.App/WithdrawList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) RecommendList(ctx context.Context, in *RecommendListRequest, opts ...grpc.CallOption) (*RecommendListReply, error) {
	out := new(RecommendListReply)
	err := c.cc.Invoke(ctx, "/api.App/RecommendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawReply, error) {
	out := new(WithdrawReply)
	err := c.cc.Invoke(ctx, "/api.App/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositReply, error) {
	out := new(DepositReply)
	err := c.cc.Invoke(ctx, "/api.App/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Deposit3(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositReply, error) {
	out := new(DepositReply)
	err := c.cc.Invoke(ctx, "/api.App/Deposit3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Deposit4(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositReply, error) {
	out := new(DepositReply)
	err := c.cc.Invoke(ctx, "/api.App/Deposit4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) VipCheck(ctx context.Context, in *VipCheckRequest, opts ...grpc.CallOption) (*VipCheckReply, error) {
	out := new(VipCheckReply)
	err := c.cc.Invoke(ctx, "/api.App/VipCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) Deposit2(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositReply, error) {
	out := new(DepositReply)
	err := c.cc.Invoke(ctx, "/api.App/Deposit2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminRewardList(ctx context.Context, in *AdminRewardListRequest, opts ...grpc.CallOption) (*AdminRewardListReply, error) {
	out := new(AdminRewardListReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminRewardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminTradeList(ctx context.Context, in *AdminTradeListRequest, opts ...grpc.CallOption) (*AdminTradeListReply, error) {
	out := new(AdminTradeListReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminTradeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) LockSystem(ctx context.Context, in *LockSystemRequest, opts ...grpc.CallOption) (*LockSystemReply, error) {
	out := new(LockSystemReply)
	err := c.cc.Invoke(ctx, "/api.App/LockSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminUserList(ctx context.Context, in *AdminUserListRequest, opts ...grpc.CallOption) (*AdminUserListReply, error) {
	out := new(AdminUserListReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) CheckAdminUserArea(ctx context.Context, in *CheckAdminUserAreaRequest, opts ...grpc.CallOption) (*CheckAdminUserAreaReply, error) {
	out := new(CheckAdminUserAreaReply)
	err := c.cc.Invoke(ctx, "/api.App/CheckAdminUserArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) CheckAndInsertLocationsRecommendUser(ctx context.Context, in *CheckAndInsertLocationsRecommendUserRequest, opts ...grpc.CallOption) (*CheckAndInsertLocationsRecommendUserReply, error) {
	out := new(CheckAndInsertLocationsRecommendUserReply)
	err := c.cc.Invoke(ctx, "/api.App/CheckAndInsertLocationsRecommendUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminLocationList(ctx context.Context, in *AdminLocationListRequest, opts ...grpc.CallOption) (*AdminLocationListReply, error) {
	out := new(AdminLocationListReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminLocationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminRecordList(ctx context.Context, in *RecordListRequest, opts ...grpc.CallOption) (*RecordListReply, error) {
	out := new(RecordListReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminLocationAllList(ctx context.Context, in *AdminLocationAllListRequest, opts ...grpc.CallOption) (*AdminLocationAllListReply, error) {
	out := new(AdminLocationAllListReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminLocationAllList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminWithdrawList(ctx context.Context, in *AdminWithdrawListRequest, opts ...grpc.CallOption) (*AdminWithdrawListReply, error) {
	out := new(AdminWithdrawListReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminWithdrawList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminWithdraw(ctx context.Context, in *AdminWithdrawRequest, opts ...grpc.CallOption) (*AdminWithdrawReply, error) {
	out := new(AdminWithdrawReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminTrade(ctx context.Context, in *AdminTradeRequest, opts ...grpc.CallOption) (*AdminTradeReply, error) {
	out := new(AdminTradeReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminWithdrawPass(ctx context.Context, in *AdminWithdrawPassRequest, opts ...grpc.CallOption) (*AdminWithdrawPassReply, error) {
	out := new(AdminWithdrawPassReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminWithdrawPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminWithdrawEth(ctx context.Context, in *AdminWithdrawEthRequest, opts ...grpc.CallOption) (*AdminWithdrawEthReply, error) {
	out := new(AdminWithdrawEthReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminWithdrawEth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminFee(ctx context.Context, in *AdminFeeRequest, opts ...grpc.CallOption) (*AdminFeeReply, error) {
	out := new(AdminFeeReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminDailyFee(ctx context.Context, in *AdminDailyFeeRequest, opts ...grpc.CallOption) (*AdminDailyFeeReply, error) {
	out := new(AdminDailyFeeReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminDailyFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminAll(ctx context.Context, in *AdminAllRequest, opts ...grpc.CallOption) (*AdminAllReply, error) {
	out := new(AdminAllReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminUserRecommend(ctx context.Context, in *AdminUserRecommendRequest, opts ...grpc.CallOption) (*AdminUserRecommendReply, error) {
	out := new(AdminUserRecommendReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminUserRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminMonthRecommend(ctx context.Context, in *AdminMonthRecommendRequest, opts ...grpc.CallOption) (*AdminMonthRecommendReply, error) {
	out := new(AdminMonthRecommendReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminMonthRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminConfig(ctx context.Context, in *AdminConfigRequest, opts ...grpc.CallOption) (*AdminConfigReply, error) {
	out := new(AdminConfigReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminConfigUpdate(ctx context.Context, in *AdminConfigUpdateRequest, opts ...grpc.CallOption) (*AdminConfigUpdateReply, error) {
	out := new(AdminConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminConfigUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminUserPasswordUpdate(ctx context.Context, in *AdminPasswordUpdateRequest, opts ...grpc.CallOption) (*AdminPasswordUpdateReply, error) {
	out := new(AdminPasswordUpdateReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminUserPasswordUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminUpdateLocationNewMax(ctx context.Context, in *AdminUpdateLocationNewMaxRequest, opts ...grpc.CallOption) (*AdminUpdateLocationNewMaxReply, error) {
	out := new(AdminUpdateLocationNewMaxReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminUpdateLocationNewMax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminVipUpdate(ctx context.Context, in *AdminVipUpdateRequest, opts ...grpc.CallOption) (*AdminVipUpdateReply, error) {
	out := new(AdminVipUpdateReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminVipUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminUndoUpdate(ctx context.Context, in *AdminUndoUpdateRequest, opts ...grpc.CallOption) (*AdminUndoUpdateReply, error) {
	out := new(AdminUndoUpdateReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminUndoUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminAreaLevelUpdate(ctx context.Context, in *AdminAreaLevelUpdateRequest, opts ...grpc.CallOption) (*AdminAreaLevelUpdateReply, error) {
	out := new(AdminAreaLevelUpdateReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminAreaLevelUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminLocationInsert(ctx context.Context, in *AdminLocationInsertRequest, opts ...grpc.CallOption) (*AdminLocationInsertReply, error) {
	out := new(AdminLocationInsertReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminLocationInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminBalanceUpdate(ctx context.Context, in *AdminBalanceUpdateRequest, opts ...grpc.CallOption) (*AdminBalanceUpdateReply, error) {
	out := new(AdminBalanceUpdateReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminBalanceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginReply, error) {
	out := new(AdminLoginReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminCreateAccount(ctx context.Context, in *AdminCreateAccountRequest, opts ...grpc.CallOption) (*AdminCreateAccountReply, error) {
	out := new(AdminCreateAccountReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminCreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminChangePassword(ctx context.Context, in *AdminChangePasswordRequest, opts ...grpc.CallOption) (*AdminChangePasswordReply, error) {
	out := new(AdminChangePasswordReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminList(ctx context.Context, in *AdminListRequest, opts ...grpc.CallOption) (*AdminListReply, error) {
	out := new(AdminListReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AuthList(ctx context.Context, in *AuthListRequest, opts ...grpc.CallOption) (*AuthListReply, error) {
	out := new(AuthListReply)
	err := c.cc.Invoke(ctx, "/api.App/AuthList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) MyAuthList(ctx context.Context, in *MyAuthListRequest, opts ...grpc.CallOption) (*MyAuthListReply, error) {
	out := new(MyAuthListReply)
	err := c.cc.Invoke(ctx, "/api.App/MyAuthList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) UserAuthList(ctx context.Context, in *UserAuthListRequest, opts ...grpc.CallOption) (*UserAuthListReply, error) {
	out := new(UserAuthListReply)
	err := c.cc.Invoke(ctx, "/api.App/UserAuthList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AuthAdminCreate(ctx context.Context, in *AuthAdminCreateRequest, opts ...grpc.CallOption) (*AuthAdminCreateReply, error) {
	out := new(AuthAdminCreateReply)
	err := c.cc.Invoke(ctx, "/api.App/AuthAdminCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AuthAdminDelete(ctx context.Context, in *AuthAdminDeleteRequest, opts ...grpc.CallOption) (*AuthAdminDeleteReply, error) {
	out := new(AuthAdminDeleteReply)
	err := c.cc.Invoke(ctx, "/api.App/AuthAdminDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) CheckAndInsertRecommendArea(ctx context.Context, in *CheckAndInsertRecommendAreaRequest, opts ...grpc.CallOption) (*CheckAndInsertRecommendAreaReply, error) {
	out := new(CheckAndInsertRecommendAreaReply)
	err := c.cc.Invoke(ctx, "/api.App/CheckAndInsertRecommendArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminDailyRecommendReward(ctx context.Context, in *AdminDailyRecommendRewardRequest, opts ...grpc.CallOption) (*AdminDailyRecommendRewardReply, error) {
	out := new(AdminDailyRecommendRewardReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminDailyRecommendReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminDailyBalanceReward(ctx context.Context, in *AdminDailyBalanceRewardRequest, opts ...grpc.CallOption) (*AdminDailyBalanceRewardReply, error) {
	out := new(AdminDailyBalanceRewardReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminDailyBalanceReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminDailyLocationReward(ctx context.Context, in *AdminDailyLocationRewardRequest, opts ...grpc.CallOption) (*AdminDailyLocationRewardReply, error) {
	out := new(AdminDailyLocationRewardReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminDailyLocationReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) AdminDailyLocationRewardNew(ctx context.Context, in *AdminDailyLocationRewardNewRequest, opts ...grpc.CallOption) (*AdminDailyLocationRewardNewReply, error) {
	out := new(AdminDailyLocationRewardNewReply)
	err := c.cc.Invoke(ctx, "/api.App/AdminDailyLocationRewardNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServer is the server API for App service.
// All implementations must embed UnimplementedAppServer
// for forward compatibility
type AppServer interface {
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoReply, error)
	RewardList(context.Context, *RewardListRequest) (*RewardListReply, error)
	RecommendRewardList(context.Context, *RecommendRewardListRequest) (*RecommendRewardListReply, error)
	FeeRewardList(context.Context, *FeeRewardListRequest) (*FeeRewardListReply, error)
	WithdrawList(context.Context, *WithdrawListRequest) (*WithdrawListReply, error)
	RecommendList(context.Context, *RecommendListRequest) (*RecommendListReply, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawReply, error)
	Deposit(context.Context, *DepositRequest) (*DepositReply, error)
	Deposit3(context.Context, *DepositRequest) (*DepositReply, error)
	Deposit4(context.Context, *DepositRequest) (*DepositReply, error)
	VipCheck(context.Context, *VipCheckRequest) (*VipCheckReply, error)
	Deposit2(context.Context, *DepositRequest) (*DepositReply, error)
	AdminRewardList(context.Context, *AdminRewardListRequest) (*AdminRewardListReply, error)
	AdminTradeList(context.Context, *AdminTradeListRequest) (*AdminTradeListReply, error)
	LockSystem(context.Context, *LockSystemRequest) (*LockSystemReply, error)
	AdminUserList(context.Context, *AdminUserListRequest) (*AdminUserListReply, error)
	CheckAdminUserArea(context.Context, *CheckAdminUserAreaRequest) (*CheckAdminUserAreaReply, error)
	CheckAndInsertLocationsRecommendUser(context.Context, *CheckAndInsertLocationsRecommendUserRequest) (*CheckAndInsertLocationsRecommendUserReply, error)
	AdminLocationList(context.Context, *AdminLocationListRequest) (*AdminLocationListReply, error)
	AdminRecordList(context.Context, *RecordListRequest) (*RecordListReply, error)
	AdminLocationAllList(context.Context, *AdminLocationAllListRequest) (*AdminLocationAllListReply, error)
	AdminWithdrawList(context.Context, *AdminWithdrawListRequest) (*AdminWithdrawListReply, error)
	AdminWithdraw(context.Context, *AdminWithdrawRequest) (*AdminWithdrawReply, error)
	AdminTrade(context.Context, *AdminTradeRequest) (*AdminTradeReply, error)
	AdminWithdrawPass(context.Context, *AdminWithdrawPassRequest) (*AdminWithdrawPassReply, error)
	AdminWithdrawEth(context.Context, *AdminWithdrawEthRequest) (*AdminWithdrawEthReply, error)
	AdminFee(context.Context, *AdminFeeRequest) (*AdminFeeReply, error)
	AdminDailyFee(context.Context, *AdminDailyFeeRequest) (*AdminDailyFeeReply, error)
	AdminAll(context.Context, *AdminAllRequest) (*AdminAllReply, error)
	AdminUserRecommend(context.Context, *AdminUserRecommendRequest) (*AdminUserRecommendReply, error)
	AdminMonthRecommend(context.Context, *AdminMonthRecommendRequest) (*AdminMonthRecommendReply, error)
	AdminConfig(context.Context, *AdminConfigRequest) (*AdminConfigReply, error)
	AdminConfigUpdate(context.Context, *AdminConfigUpdateRequest) (*AdminConfigUpdateReply, error)
	AdminUserPasswordUpdate(context.Context, *AdminPasswordUpdateRequest) (*AdminPasswordUpdateReply, error)
	AdminUpdateLocationNewMax(context.Context, *AdminUpdateLocationNewMaxRequest) (*AdminUpdateLocationNewMaxReply, error)
	AdminVipUpdate(context.Context, *AdminVipUpdateRequest) (*AdminVipUpdateReply, error)
	AdminUndoUpdate(context.Context, *AdminUndoUpdateRequest) (*AdminUndoUpdateReply, error)
	AdminAreaLevelUpdate(context.Context, *AdminAreaLevelUpdateRequest) (*AdminAreaLevelUpdateReply, error)
	AdminLocationInsert(context.Context, *AdminLocationInsertRequest) (*AdminLocationInsertReply, error)
	AdminBalanceUpdate(context.Context, *AdminBalanceUpdateRequest) (*AdminBalanceUpdateReply, error)
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginReply, error)
	AdminCreateAccount(context.Context, *AdminCreateAccountRequest) (*AdminCreateAccountReply, error)
	AdminChangePassword(context.Context, *AdminChangePasswordRequest) (*AdminChangePasswordReply, error)
	AdminList(context.Context, *AdminListRequest) (*AdminListReply, error)
	AuthList(context.Context, *AuthListRequest) (*AuthListReply, error)
	MyAuthList(context.Context, *MyAuthListRequest) (*MyAuthListReply, error)
	UserAuthList(context.Context, *UserAuthListRequest) (*UserAuthListReply, error)
	AuthAdminCreate(context.Context, *AuthAdminCreateRequest) (*AuthAdminCreateReply, error)
	AuthAdminDelete(context.Context, *AuthAdminDeleteRequest) (*AuthAdminDeleteReply, error)
	CheckAndInsertRecommendArea(context.Context, *CheckAndInsertRecommendAreaRequest) (*CheckAndInsertRecommendAreaReply, error)
	AdminDailyRecommendReward(context.Context, *AdminDailyRecommendRewardRequest) (*AdminDailyRecommendRewardReply, error)
	AdminDailyBalanceReward(context.Context, *AdminDailyBalanceRewardRequest) (*AdminDailyBalanceRewardReply, error)
	AdminDailyLocationReward(context.Context, *AdminDailyLocationRewardRequest) (*AdminDailyLocationRewardReply, error)
	AdminDailyLocationRewardNew(context.Context, *AdminDailyLocationRewardNewRequest) (*AdminDailyLocationRewardNewReply, error)
	mustEmbedUnimplementedAppServer()
}

// UnimplementedAppServer must be embedded to have forward compatible implementations.
type UnimplementedAppServer struct {
}

func (UnimplementedAppServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedAppServer) RewardList(context.Context, *RewardListRequest) (*RewardListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardList not implemented")
}
func (UnimplementedAppServer) RecommendRewardList(context.Context, *RecommendRewardListRequest) (*RecommendRewardListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendRewardList not implemented")
}
func (UnimplementedAppServer) FeeRewardList(context.Context, *FeeRewardListRequest) (*FeeRewardListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeRewardList not implemented")
}
func (UnimplementedAppServer) WithdrawList(context.Context, *WithdrawListRequest) (*WithdrawListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawList not implemented")
}
func (UnimplementedAppServer) RecommendList(context.Context, *RecommendListRequest) (*RecommendListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendList not implemented")
}
func (UnimplementedAppServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedAppServer) Deposit(context.Context, *DepositRequest) (*DepositReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedAppServer) Deposit3(context.Context, *DepositRequest) (*DepositReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit3 not implemented")
}
func (UnimplementedAppServer) Deposit4(context.Context, *DepositRequest) (*DepositReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit4 not implemented")
}
func (UnimplementedAppServer) VipCheck(context.Context, *VipCheckRequest) (*VipCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VipCheck not implemented")
}
func (UnimplementedAppServer) Deposit2(context.Context, *DepositRequest) (*DepositReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit2 not implemented")
}
func (UnimplementedAppServer) AdminRewardList(context.Context, *AdminRewardListRequest) (*AdminRewardListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRewardList not implemented")
}
func (UnimplementedAppServer) AdminTradeList(context.Context, *AdminTradeListRequest) (*AdminTradeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminTradeList not implemented")
}
func (UnimplementedAppServer) LockSystem(context.Context, *LockSystemRequest) (*LockSystemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockSystem not implemented")
}
func (UnimplementedAppServer) AdminUserList(context.Context, *AdminUserListRequest) (*AdminUserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserList not implemented")
}
func (UnimplementedAppServer) CheckAdminUserArea(context.Context, *CheckAdminUserAreaRequest) (*CheckAdminUserAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAdminUserArea not implemented")
}
func (UnimplementedAppServer) CheckAndInsertLocationsRecommendUser(context.Context, *CheckAndInsertLocationsRecommendUserRequest) (*CheckAndInsertLocationsRecommendUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAndInsertLocationsRecommendUser not implemented")
}
func (UnimplementedAppServer) AdminLocationList(context.Context, *AdminLocationListRequest) (*AdminLocationListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLocationList not implemented")
}
func (UnimplementedAppServer) AdminRecordList(context.Context, *RecordListRequest) (*RecordListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRecordList not implemented")
}
func (UnimplementedAppServer) AdminLocationAllList(context.Context, *AdminLocationAllListRequest) (*AdminLocationAllListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLocationAllList not implemented")
}
func (UnimplementedAppServer) AdminWithdrawList(context.Context, *AdminWithdrawListRequest) (*AdminWithdrawListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminWithdrawList not implemented")
}
func (UnimplementedAppServer) AdminWithdraw(context.Context, *AdminWithdrawRequest) (*AdminWithdrawReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminWithdraw not implemented")
}
func (UnimplementedAppServer) AdminTrade(context.Context, *AdminTradeRequest) (*AdminTradeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminTrade not implemented")
}
func (UnimplementedAppServer) AdminWithdrawPass(context.Context, *AdminWithdrawPassRequest) (*AdminWithdrawPassReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminWithdrawPass not implemented")
}
func (UnimplementedAppServer) AdminWithdrawEth(context.Context, *AdminWithdrawEthRequest) (*AdminWithdrawEthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminWithdrawEth not implemented")
}
func (UnimplementedAppServer) AdminFee(context.Context, *AdminFeeRequest) (*AdminFeeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminFee not implemented")
}
func (UnimplementedAppServer) AdminDailyFee(context.Context, *AdminDailyFeeRequest) (*AdminDailyFeeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDailyFee not implemented")
}
func (UnimplementedAppServer) AdminAll(context.Context, *AdminAllRequest) (*AdminAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAll not implemented")
}
func (UnimplementedAppServer) AdminUserRecommend(context.Context, *AdminUserRecommendRequest) (*AdminUserRecommendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserRecommend not implemented")
}
func (UnimplementedAppServer) AdminMonthRecommend(context.Context, *AdminMonthRecommendRequest) (*AdminMonthRecommendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminMonthRecommend not implemented")
}
func (UnimplementedAppServer) AdminConfig(context.Context, *AdminConfigRequest) (*AdminConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminConfig not implemented")
}
func (UnimplementedAppServer) AdminConfigUpdate(context.Context, *AdminConfigUpdateRequest) (*AdminConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminConfigUpdate not implemented")
}
func (UnimplementedAppServer) AdminUserPasswordUpdate(context.Context, *AdminPasswordUpdateRequest) (*AdminPasswordUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUserPasswordUpdate not implemented")
}
func (UnimplementedAppServer) AdminUpdateLocationNewMax(context.Context, *AdminUpdateLocationNewMaxRequest) (*AdminUpdateLocationNewMaxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateLocationNewMax not implemented")
}
func (UnimplementedAppServer) AdminVipUpdate(context.Context, *AdminVipUpdateRequest) (*AdminVipUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminVipUpdate not implemented")
}
func (UnimplementedAppServer) AdminUndoUpdate(context.Context, *AdminUndoUpdateRequest) (*AdminUndoUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUndoUpdate not implemented")
}
func (UnimplementedAppServer) AdminAreaLevelUpdate(context.Context, *AdminAreaLevelUpdateRequest) (*AdminAreaLevelUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAreaLevelUpdate not implemented")
}
func (UnimplementedAppServer) AdminLocationInsert(context.Context, *AdminLocationInsertRequest) (*AdminLocationInsertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLocationInsert not implemented")
}
func (UnimplementedAppServer) AdminBalanceUpdate(context.Context, *AdminBalanceUpdateRequest) (*AdminBalanceUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminBalanceUpdate not implemented")
}
func (UnimplementedAppServer) AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAppServer) AdminCreateAccount(context.Context, *AdminCreateAccountRequest) (*AdminCreateAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateAccount not implemented")
}
func (UnimplementedAppServer) AdminChangePassword(context.Context, *AdminChangePasswordRequest) (*AdminChangePasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminChangePassword not implemented")
}
func (UnimplementedAppServer) AdminList(context.Context, *AdminListRequest) (*AdminListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminList not implemented")
}
func (UnimplementedAppServer) AuthList(context.Context, *AuthListRequest) (*AuthListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthList not implemented")
}
func (UnimplementedAppServer) MyAuthList(context.Context, *MyAuthListRequest) (*MyAuthListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyAuthList not implemented")
}
func (UnimplementedAppServer) UserAuthList(context.Context, *UserAuthListRequest) (*UserAuthListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuthList not implemented")
}
func (UnimplementedAppServer) AuthAdminCreate(context.Context, *AuthAdminCreateRequest) (*AuthAdminCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthAdminCreate not implemented")
}
func (UnimplementedAppServer) AuthAdminDelete(context.Context, *AuthAdminDeleteRequest) (*AuthAdminDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthAdminDelete not implemented")
}
func (UnimplementedAppServer) CheckAndInsertRecommendArea(context.Context, *CheckAndInsertRecommendAreaRequest) (*CheckAndInsertRecommendAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAndInsertRecommendArea not implemented")
}
func (UnimplementedAppServer) AdminDailyRecommendReward(context.Context, *AdminDailyRecommendRewardRequest) (*AdminDailyRecommendRewardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDailyRecommendReward not implemented")
}
func (UnimplementedAppServer) AdminDailyBalanceReward(context.Context, *AdminDailyBalanceRewardRequest) (*AdminDailyBalanceRewardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDailyBalanceReward not implemented")
}
func (UnimplementedAppServer) AdminDailyLocationReward(context.Context, *AdminDailyLocationRewardRequest) (*AdminDailyLocationRewardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDailyLocationReward not implemented")
}
func (UnimplementedAppServer) AdminDailyLocationRewardNew(context.Context, *AdminDailyLocationRewardNewRequest) (*AdminDailyLocationRewardNewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDailyLocationRewardNew not implemented")
}
func (UnimplementedAppServer) mustEmbedUnimplementedAppServer() {}

// UnsafeAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServer will
// result in compilation errors.
type UnsafeAppServer interface {
	mustEmbedUnimplementedAppServer()
}

func RegisterAppServer(s grpc.ServiceRegistrar, srv AppServer) {
	s.RegisterService(&App_ServiceDesc, srv)
}

func _App_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_RewardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).RewardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/RewardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).RewardList(ctx, req.(*RewardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_RecommendRewardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendRewardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).RecommendRewardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/RecommendRewardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).RecommendRewardList(ctx, req.(*RecommendRewardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_FeeRewardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeRewardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).FeeRewardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/FeeRewardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).FeeRewardList(ctx, req.(*FeeRewardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_WithdrawList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).WithdrawList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/WithdrawList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).WithdrawList(ctx, req.(*WithdrawListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_RecommendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).RecommendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/RecommendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).RecommendList(ctx, req.(*RecommendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Deposit3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Deposit3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/Deposit3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Deposit3(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Deposit4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Deposit4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/Deposit4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Deposit4(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_VipCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).VipCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/VipCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).VipCheck(ctx, req.(*VipCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_Deposit2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).Deposit2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/Deposit2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).Deposit2(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminRewardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRewardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminRewardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminRewardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminRewardList(ctx, req.(*AdminRewardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminTradeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminTradeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminTradeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminTradeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminTradeList(ctx, req.(*AdminTradeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_LockSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).LockSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/LockSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).LockSystem(ctx, req.(*LockSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminUserList(ctx, req.(*AdminUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_CheckAdminUserArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAdminUserAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).CheckAdminUserArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/CheckAdminUserArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).CheckAdminUserArea(ctx, req.(*CheckAdminUserAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_CheckAndInsertLocationsRecommendUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAndInsertLocationsRecommendUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).CheckAndInsertLocationsRecommendUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/CheckAndInsertLocationsRecommendUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).CheckAndInsertLocationsRecommendUser(ctx, req.(*CheckAndInsertLocationsRecommendUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminLocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLocationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminLocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminLocationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminLocationList(ctx, req.(*AdminLocationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminRecordList(ctx, req.(*RecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminLocationAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLocationAllListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminLocationAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminLocationAllList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminLocationAllList(ctx, req.(*AdminLocationAllListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminWithdrawList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminWithdrawListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminWithdrawList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminWithdrawList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminWithdrawList(ctx, req.(*AdminWithdrawListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminWithdraw(ctx, req.(*AdminWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminTrade(ctx, req.(*AdminTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminWithdrawPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminWithdrawPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminWithdrawPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminWithdrawPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminWithdrawPass(ctx, req.(*AdminWithdrawPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminWithdrawEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminWithdrawEthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminWithdrawEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminWithdrawEth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminWithdrawEth(ctx, req.(*AdminWithdrawEthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminFee(ctx, req.(*AdminFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminDailyFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDailyFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminDailyFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminDailyFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminDailyFee(ctx, req.(*AdminDailyFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminAll(ctx, req.(*AdminAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminUserRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminUserRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminUserRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminUserRecommend(ctx, req.(*AdminUserRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminMonthRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminMonthRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminMonthRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminMonthRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminMonthRecommend(ctx, req.(*AdminMonthRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminConfig(ctx, req.(*AdminConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminConfigUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminConfigUpdate(ctx, req.(*AdminConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminUserPasswordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminPasswordUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminUserPasswordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminUserPasswordUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminUserPasswordUpdate(ctx, req.(*AdminPasswordUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminUpdateLocationNewMax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateLocationNewMaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminUpdateLocationNewMax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminUpdateLocationNewMax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminUpdateLocationNewMax(ctx, req.(*AdminUpdateLocationNewMaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminVipUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminVipUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminVipUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminVipUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminVipUpdate(ctx, req.(*AdminVipUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminUndoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUndoUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminUndoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminUndoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminUndoUpdate(ctx, req.(*AdminUndoUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminAreaLevelUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAreaLevelUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminAreaLevelUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminAreaLevelUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminAreaLevelUpdate(ctx, req.(*AdminAreaLevelUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminLocationInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLocationInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminLocationInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminLocationInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminLocationInsert(ctx, req.(*AdminLocationInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminBalanceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBalanceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminBalanceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminBalanceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminBalanceUpdate(ctx, req.(*AdminBalanceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminLogin(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminCreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminCreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminCreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminCreateAccount(ctx, req.(*AdminCreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminChangePassword(ctx, req.(*AdminChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminList(ctx, req.(*AdminListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AuthList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AuthList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AuthList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AuthList(ctx, req.(*AuthListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_MyAuthList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyAuthListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).MyAuthList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/MyAuthList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).MyAuthList(ctx, req.(*MyAuthListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_UserAuthList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).UserAuthList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/UserAuthList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).UserAuthList(ctx, req.(*UserAuthListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AuthAdminCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthAdminCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AuthAdminCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AuthAdminCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AuthAdminCreate(ctx, req.(*AuthAdminCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AuthAdminDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthAdminDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AuthAdminDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AuthAdminDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AuthAdminDelete(ctx, req.(*AuthAdminDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_CheckAndInsertRecommendArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAndInsertRecommendAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).CheckAndInsertRecommendArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/CheckAndInsertRecommendArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).CheckAndInsertRecommendArea(ctx, req.(*CheckAndInsertRecommendAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminDailyRecommendReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDailyRecommendRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminDailyRecommendReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminDailyRecommendReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminDailyRecommendReward(ctx, req.(*AdminDailyRecommendRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminDailyBalanceReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDailyBalanceRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminDailyBalanceReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminDailyBalanceReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminDailyBalanceReward(ctx, req.(*AdminDailyBalanceRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminDailyLocationReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDailyLocationRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminDailyLocationReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminDailyLocationReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminDailyLocationReward(ctx, req.(*AdminDailyLocationRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_AdminDailyLocationRewardNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDailyLocationRewardNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).AdminDailyLocationRewardNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.App/AdminDailyLocationRewardNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).AdminDailyLocationRewardNew(ctx, req.(*AdminDailyLocationRewardNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// App_ServiceDesc is the grpc.ServiceDesc for App service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var App_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.App",
	HandlerType: (*AppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserInfo",
			Handler:    _App_UserInfo_Handler,
		},
		{
			MethodName: "RewardList",
			Handler:    _App_RewardList_Handler,
		},
		{
			MethodName: "RecommendRewardList",
			Handler:    _App_RecommendRewardList_Handler,
		},
		{
			MethodName: "FeeRewardList",
			Handler:    _App_FeeRewardList_Handler,
		},
		{
			MethodName: "WithdrawList",
			Handler:    _App_WithdrawList_Handler,
		},
		{
			MethodName: "RecommendList",
			Handler:    _App_RecommendList_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _App_Withdraw_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _App_Deposit_Handler,
		},
		{
			MethodName: "Deposit3",
			Handler:    _App_Deposit3_Handler,
		},
		{
			MethodName: "Deposit4",
			Handler:    _App_Deposit4_Handler,
		},
		{
			MethodName: "VipCheck",
			Handler:    _App_VipCheck_Handler,
		},
		{
			MethodName: "Deposit2",
			Handler:    _App_Deposit2_Handler,
		},
		{
			MethodName: "AdminRewardList",
			Handler:    _App_AdminRewardList_Handler,
		},
		{
			MethodName: "AdminTradeList",
			Handler:    _App_AdminTradeList_Handler,
		},
		{
			MethodName: "LockSystem",
			Handler:    _App_LockSystem_Handler,
		},
		{
			MethodName: "AdminUserList",
			Handler:    _App_AdminUserList_Handler,
		},
		{
			MethodName: "CheckAdminUserArea",
			Handler:    _App_CheckAdminUserArea_Handler,
		},
		{
			MethodName: "CheckAndInsertLocationsRecommendUser",
			Handler:    _App_CheckAndInsertLocationsRecommendUser_Handler,
		},
		{
			MethodName: "AdminLocationList",
			Handler:    _App_AdminLocationList_Handler,
		},
		{
			MethodName: "AdminRecordList",
			Handler:    _App_AdminRecordList_Handler,
		},
		{
			MethodName: "AdminLocationAllList",
			Handler:    _App_AdminLocationAllList_Handler,
		},
		{
			MethodName: "AdminWithdrawList",
			Handler:    _App_AdminWithdrawList_Handler,
		},
		{
			MethodName: "AdminWithdraw",
			Handler:    _App_AdminWithdraw_Handler,
		},
		{
			MethodName: "AdminTrade",
			Handler:    _App_AdminTrade_Handler,
		},
		{
			MethodName: "AdminWithdrawPass",
			Handler:    _App_AdminWithdrawPass_Handler,
		},
		{
			MethodName: "AdminWithdrawEth",
			Handler:    _App_AdminWithdrawEth_Handler,
		},
		{
			MethodName: "AdminFee",
			Handler:    _App_AdminFee_Handler,
		},
		{
			MethodName: "AdminDailyFee",
			Handler:    _App_AdminDailyFee_Handler,
		},
		{
			MethodName: "AdminAll",
			Handler:    _App_AdminAll_Handler,
		},
		{
			MethodName: "AdminUserRecommend",
			Handler:    _App_AdminUserRecommend_Handler,
		},
		{
			MethodName: "AdminMonthRecommend",
			Handler:    _App_AdminMonthRecommend_Handler,
		},
		{
			MethodName: "AdminConfig",
			Handler:    _App_AdminConfig_Handler,
		},
		{
			MethodName: "AdminConfigUpdate",
			Handler:    _App_AdminConfigUpdate_Handler,
		},
		{
			MethodName: "AdminUserPasswordUpdate",
			Handler:    _App_AdminUserPasswordUpdate_Handler,
		},
		{
			MethodName: "AdminUpdateLocationNewMax",
			Handler:    _App_AdminUpdateLocationNewMax_Handler,
		},
		{
			MethodName: "AdminVipUpdate",
			Handler:    _App_AdminVipUpdate_Handler,
		},
		{
			MethodName: "AdminUndoUpdate",
			Handler:    _App_AdminUndoUpdate_Handler,
		},
		{
			MethodName: "AdminAreaLevelUpdate",
			Handler:    _App_AdminAreaLevelUpdate_Handler,
		},
		{
			MethodName: "AdminLocationInsert",
			Handler:    _App_AdminLocationInsert_Handler,
		},
		{
			MethodName: "AdminBalanceUpdate",
			Handler:    _App_AdminBalanceUpdate_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _App_AdminLogin_Handler,
		},
		{
			MethodName: "AdminCreateAccount",
			Handler:    _App_AdminCreateAccount_Handler,
		},
		{
			MethodName: "AdminChangePassword",
			Handler:    _App_AdminChangePassword_Handler,
		},
		{
			MethodName: "AdminList",
			Handler:    _App_AdminList_Handler,
		},
		{
			MethodName: "AuthList",
			Handler:    _App_AuthList_Handler,
		},
		{
			MethodName: "MyAuthList",
			Handler:    _App_MyAuthList_Handler,
		},
		{
			MethodName: "UserAuthList",
			Handler:    _App_UserAuthList_Handler,
		},
		{
			MethodName: "AuthAdminCreate",
			Handler:    _App_AuthAdminCreate_Handler,
		},
		{
			MethodName: "AuthAdminDelete",
			Handler:    _App_AuthAdminDelete_Handler,
		},
		{
			MethodName: "CheckAndInsertRecommendArea",
			Handler:    _App_CheckAndInsertRecommendArea_Handler,
		},
		{
			MethodName: "AdminDailyRecommendReward",
			Handler:    _App_AdminDailyRecommendReward_Handler,
		},
		{
			MethodName: "AdminDailyBalanceReward",
			Handler:    _App_AdminDailyBalanceReward_Handler,
		},
		{
			MethodName: "AdminDailyLocationReward",
			Handler:    _App_AdminDailyLocationReward_Handler,
		},
		{
			MethodName: "AdminDailyLocationRewardNew",
			Handler:    _App_AdminDailyLocationRewardNew_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/app/api/app.proto",
}
