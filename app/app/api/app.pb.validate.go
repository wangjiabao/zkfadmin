// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: app/app/api/app.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EthAuthorizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EthAuthorizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EthAuthorizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EthAuthorizeRequestMultiError, or nil if none found.
func (m *EthAuthorizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EthAuthorizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EthAuthorizeRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EthAuthorizeRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EthAuthorizeRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EthAuthorizeRequestMultiError(errors)
	}

	return nil
}

// EthAuthorizeRequestMultiError is an error wrapping multiple validation
// errors returned by EthAuthorizeRequest.ValidateAll() if the designated
// constraints aren't met.
type EthAuthorizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EthAuthorizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EthAuthorizeRequestMultiError) AllErrors() []error { return m }

// EthAuthorizeRequestValidationError is the validation error returned by
// EthAuthorizeRequest.Validate if the designated constraints aren't met.
type EthAuthorizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EthAuthorizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EthAuthorizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EthAuthorizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EthAuthorizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EthAuthorizeRequestValidationError) ErrorName() string {
	return "EthAuthorizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EthAuthorizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEthAuthorizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EthAuthorizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EthAuthorizeRequestValidationError{}

// Validate checks the field values on EthAuthorizeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EthAuthorizeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EthAuthorizeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EthAuthorizeReplyMultiError, or nil if none found.
func (m *EthAuthorizeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EthAuthorizeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return EthAuthorizeReplyMultiError(errors)
	}

	return nil
}

// EthAuthorizeReplyMultiError is an error wrapping multiple validation errors
// returned by EthAuthorizeReply.ValidateAll() if the designated constraints
// aren't met.
type EthAuthorizeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EthAuthorizeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EthAuthorizeReplyMultiError) AllErrors() []error { return m }

// EthAuthorizeReplyValidationError is the validation error returned by
// EthAuthorizeReply.Validate if the designated constraints aren't met.
type EthAuthorizeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EthAuthorizeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EthAuthorizeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EthAuthorizeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EthAuthorizeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EthAuthorizeReplyValidationError) ErrorName() string {
	return "EthAuthorizeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e EthAuthorizeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEthAuthorizeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EthAuthorizeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EthAuthorizeReplyValidationError{}

// Validate checks the field values on DepositRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DepositRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DepositRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DepositRequestMultiError,
// or nil if none found.
func (m *DepositRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DepositRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DepositRequestMultiError(errors)
	}

	return nil
}

// DepositRequestMultiError is an error wrapping multiple validation errors
// returned by DepositRequest.ValidateAll() if the designated constraints
// aren't met.
type DepositRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepositRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepositRequestMultiError) AllErrors() []error { return m }

// DepositRequestValidationError is the validation error returned by
// DepositRequest.Validate if the designated constraints aren't met.
type DepositRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepositRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepositRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepositRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepositRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepositRequestValidationError) ErrorName() string { return "DepositRequestValidationError" }

// Error satisfies the builtin error interface
func (e DepositRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepositRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepositRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepositRequestValidationError{}

// Validate checks the field values on DepositReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DepositReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DepositReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DepositReplyMultiError, or
// nil if none found.
func (m *DepositReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DepositReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DepositReplyMultiError(errors)
	}

	return nil
}

// DepositReplyMultiError is an error wrapping multiple validation errors
// returned by DepositReply.ValidateAll() if the designated constraints aren't met.
type DepositReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepositReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepositReplyMultiError) AllErrors() []error { return m }

// DepositReplyValidationError is the validation error returned by
// DepositReply.Validate if the designated constraints aren't met.
type DepositReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepositReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepositReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepositReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepositReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepositReplyValidationError) ErrorName() string { return "DepositReplyValidationError" }

// Error satisfies the builtin error interface
func (e DepositReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepositReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepositReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepositReplyValidationError{}

// Validate checks the field values on VipCheckRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VipCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VipCheckRequestMultiError, or nil if none found.
func (m *VipCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VipCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VipCheckRequestMultiError(errors)
	}

	return nil
}

// VipCheckRequestMultiError is an error wrapping multiple validation errors
// returned by VipCheckRequest.ValidateAll() if the designated constraints
// aren't met.
type VipCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipCheckRequestMultiError) AllErrors() []error { return m }

// VipCheckRequestValidationError is the validation error returned by
// VipCheckRequest.Validate if the designated constraints aren't met.
type VipCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipCheckRequestValidationError) ErrorName() string { return "VipCheckRequestValidationError" }

// Error satisfies the builtin error interface
func (e VipCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipCheckRequestValidationError{}

// Validate checks the field values on VipCheckReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VipCheckReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipCheckReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VipCheckReplyMultiError, or
// nil if none found.
func (m *VipCheckReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VipCheckReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VipCheckReplyMultiError(errors)
	}

	return nil
}

// VipCheckReplyMultiError is an error wrapping multiple validation errors
// returned by VipCheckReply.ValidateAll() if the designated constraints
// aren't met.
type VipCheckReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipCheckReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipCheckReplyMultiError) AllErrors() []error { return m }

// VipCheckReplyValidationError is the validation error returned by
// VipCheckReply.Validate if the designated constraints aren't met.
type VipCheckReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipCheckReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipCheckReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipCheckReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipCheckReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipCheckReplyValidationError) ErrorName() string { return "VipCheckReplyValidationError" }

// Error satisfies the builtin error interface
func (e VipCheckReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipCheckReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipCheckReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipCheckReplyValidationError{}

// Validate checks the field values on UserInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoRequestMultiError, or nil if none found.
func (m *UserInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserInfoRequestMultiError(errors)
	}

	return nil
}

// UserInfoRequestMultiError is an error wrapping multiple validation errors
// returned by UserInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type UserInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoRequestMultiError) AllErrors() []error { return m }

// UserInfoRequestValidationError is the validation error returned by
// UserInfoRequest.Validate if the designated constraints aren't met.
type UserInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoRequestValidationError) ErrorName() string { return "UserInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoRequestValidationError{}

// Validate checks the field values on UserInfoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoReplyMultiError, or
// nil if none found.
func (m *UserInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Level

	// no validation rules for Status

	// no validation rules for Amount

	// no validation rules for BalanceUsdt

	// no validation rules for BalanceDhb

	// no validation rules for InviteUrl

	// no validation rules for InviteUserAddress

	// no validation rules for RecommendNum

	// no validation rules for RecommendTeamNum

	// no validation rules for Total

	// no validation rules for FeeTotal

	// no validation rules for Row

	// no validation rules for Col

	// no validation rules for CurrentMonthRecommendNum

	// no validation rules for RecommendTotal

	// no validation rules for LocationTotal

	// no validation rules for Level1Dhb

	// no validation rules for Level2Dhb

	// no validation rules for Level3Dhb

	// no validation rules for Usdt

	// no validation rules for Dhb

	// no validation rules for Account

	// no validation rules for RecommendNumAll

	// no validation rules for RecommendTeamAll

	// no validation rules for AmountB

	// no validation rules for UserCount

	if len(errors) > 0 {
		return UserInfoReplyMultiError(errors)
	}

	return nil
}

// UserInfoReplyMultiError is an error wrapping multiple validation errors
// returned by UserInfoReply.ValidateAll() if the designated constraints
// aren't met.
type UserInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoReplyMultiError) AllErrors() []error { return m }

// UserInfoReplyValidationError is the validation error returned by
// UserInfoReply.Validate if the designated constraints aren't met.
type UserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoReplyValidationError) ErrorName() string { return "UserInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoReplyValidationError{}

// Validate checks the field values on RewardListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RewardListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RewardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RewardListRequestMultiError, or nil if none found.
func (m *RewardListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RewardListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return RewardListRequestMultiError(errors)
	}

	return nil
}

// RewardListRequestMultiError is an error wrapping multiple validation errors
// returned by RewardListRequest.ValidateAll() if the designated constraints
// aren't met.
type RewardListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewardListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewardListRequestMultiError) AllErrors() []error { return m }

// RewardListRequestValidationError is the validation error returned by
// RewardListRequest.Validate if the designated constraints aren't met.
type RewardListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewardListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewardListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewardListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewardListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewardListRequestValidationError) ErrorName() string {
	return "RewardListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RewardListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewardListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewardListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewardListRequestValidationError{}

// Validate checks the field values on RewardListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RewardListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RewardListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RewardListReplyMultiError, or nil if none found.
func (m *RewardListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RewardListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RewardListReplyValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RewardListReplyMultiError(errors)
	}

	return nil
}

// RewardListReplyMultiError is an error wrapping multiple validation errors
// returned by RewardListReply.ValidateAll() if the designated constraints
// aren't met.
type RewardListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewardListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewardListReplyMultiError) AllErrors() []error { return m }

// RewardListReplyValidationError is the validation error returned by
// RewardListReply.Validate if the designated constraints aren't met.
type RewardListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewardListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewardListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewardListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewardListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewardListReplyValidationError) ErrorName() string { return "RewardListReplyValidationError" }

// Error satisfies the builtin error interface
func (e RewardListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewardListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewardListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewardListReplyValidationError{}

// Validate checks the field values on RecommendRewardListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendRewardListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendRewardListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendRewardListRequestMultiError, or nil if none found.
func (m *RecommendRewardListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendRewardListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RecommendRewardListRequestMultiError(errors)
	}

	return nil
}

// RecommendRewardListRequestMultiError is an error wrapping multiple
// validation errors returned by RecommendRewardListRequest.ValidateAll() if
// the designated constraints aren't met.
type RecommendRewardListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendRewardListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendRewardListRequestMultiError) AllErrors() []error { return m }

// RecommendRewardListRequestValidationError is the validation error returned
// by RecommendRewardListRequest.Validate if the designated constraints aren't met.
type RecommendRewardListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendRewardListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendRewardListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendRewardListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendRewardListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendRewardListRequestValidationError) ErrorName() string {
	return "RecommendRewardListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendRewardListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendRewardListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendRewardListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendRewardListRequestValidationError{}

// Validate checks the field values on RecommendRewardListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendRewardListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendRewardListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendRewardListReplyMultiError, or nil if none found.
func (m *RecommendRewardListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendRewardListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecommendRewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecommendRewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecommendRewardListReplyValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RecommendRewardListReplyMultiError(errors)
	}

	return nil
}

// RecommendRewardListReplyMultiError is an error wrapping multiple validation
// errors returned by RecommendRewardListReply.ValidateAll() if the designated
// constraints aren't met.
type RecommendRewardListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendRewardListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendRewardListReplyMultiError) AllErrors() []error { return m }

// RecommendRewardListReplyValidationError is the validation error returned by
// RecommendRewardListReply.Validate if the designated constraints aren't met.
type RecommendRewardListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendRewardListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendRewardListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendRewardListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendRewardListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendRewardListReplyValidationError) ErrorName() string {
	return "RecommendRewardListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendRewardListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendRewardListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendRewardListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendRewardListReplyValidationError{}

// Validate checks the field values on FeeRewardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeeRewardListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeeRewardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeeRewardListRequestMultiError, or nil if none found.
func (m *FeeRewardListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeeRewardListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FeeRewardListRequestMultiError(errors)
	}

	return nil
}

// FeeRewardListRequestMultiError is an error wrapping multiple validation
// errors returned by FeeRewardListRequest.ValidateAll() if the designated
// constraints aren't met.
type FeeRewardListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeeRewardListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeeRewardListRequestMultiError) AllErrors() []error { return m }

// FeeRewardListRequestValidationError is the validation error returned by
// FeeRewardListRequest.Validate if the designated constraints aren't met.
type FeeRewardListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeeRewardListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeeRewardListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeeRewardListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeeRewardListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeeRewardListRequestValidationError) ErrorName() string {
	return "FeeRewardListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeeRewardListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeeRewardListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeeRewardListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeeRewardListRequestValidationError{}

// Validate checks the field values on FeeRewardListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeeRewardListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeeRewardListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeeRewardListReplyMultiError, or nil if none found.
func (m *FeeRewardListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FeeRewardListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeeRewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeeRewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeeRewardListReplyValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FeeRewardListReplyMultiError(errors)
	}

	return nil
}

// FeeRewardListReplyMultiError is an error wrapping multiple validation errors
// returned by FeeRewardListReply.ValidateAll() if the designated constraints
// aren't met.
type FeeRewardListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeeRewardListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeeRewardListReplyMultiError) AllErrors() []error { return m }

// FeeRewardListReplyValidationError is the validation error returned by
// FeeRewardListReply.Validate if the designated constraints aren't met.
type FeeRewardListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeeRewardListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeeRewardListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeeRewardListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeeRewardListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeeRewardListReplyValidationError) ErrorName() string {
	return "FeeRewardListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FeeRewardListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeeRewardListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeeRewardListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeeRewardListReplyValidationError{}

// Validate checks the field values on WithdrawListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawListRequestMultiError, or nil if none found.
func (m *WithdrawListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return WithdrawListRequestMultiError(errors)
	}

	return nil
}

// WithdrawListRequestMultiError is an error wrapping multiple validation
// errors returned by WithdrawListRequest.ValidateAll() if the designated
// constraints aren't met.
type WithdrawListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawListRequestMultiError) AllErrors() []error { return m }

// WithdrawListRequestValidationError is the validation error returned by
// WithdrawListRequest.Validate if the designated constraints aren't met.
type WithdrawListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawListRequestValidationError) ErrorName() string {
	return "WithdrawListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawListRequestValidationError{}

// Validate checks the field values on WithdrawListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WithdrawListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawListReplyMultiError, or nil if none found.
func (m *WithdrawListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWithdraw() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WithdrawListReplyValidationError{
						field:  fmt.Sprintf("Withdraw[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WithdrawListReplyValidationError{
						field:  fmt.Sprintf("Withdraw[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WithdrawListReplyValidationError{
					field:  fmt.Sprintf("Withdraw[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WithdrawListReplyMultiError(errors)
	}

	return nil
}

// WithdrawListReplyMultiError is an error wrapping multiple validation errors
// returned by WithdrawListReply.ValidateAll() if the designated constraints
// aren't met.
type WithdrawListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawListReplyMultiError) AllErrors() []error { return m }

// WithdrawListReplyValidationError is the validation error returned by
// WithdrawListReply.Validate if the designated constraints aren't met.
type WithdrawListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawListReplyValidationError) ErrorName() string {
	return "WithdrawListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawListReplyValidationError{}

// Validate checks the field values on RecommendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendListRequestMultiError, or nil if none found.
func (m *RecommendListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return RecommendListRequestMultiError(errors)
	}

	return nil
}

// RecommendListRequestMultiError is an error wrapping multiple validation
// errors returned by RecommendListRequest.ValidateAll() if the designated
// constraints aren't met.
type RecommendListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendListRequestMultiError) AllErrors() []error { return m }

// RecommendListRequestValidationError is the validation error returned by
// RecommendListRequest.Validate if the designated constraints aren't met.
type RecommendListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendListRequestValidationError) ErrorName() string {
	return "RecommendListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendListRequestValidationError{}

// Validate checks the field values on RecommendListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendListReplyMultiError, or nil if none found.
func (m *RecommendListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecommends() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecommendListReplyValidationError{
						field:  fmt.Sprintf("Recommends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecommendListReplyValidationError{
						field:  fmt.Sprintf("Recommends[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecommendListReplyValidationError{
					field:  fmt.Sprintf("Recommends[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RecommendListReplyMultiError(errors)
	}

	return nil
}

// RecommendListReplyMultiError is an error wrapping multiple validation errors
// returned by RecommendListReply.ValidateAll() if the designated constraints
// aren't met.
type RecommendListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendListReplyMultiError) AllErrors() []error { return m }

// RecommendListReplyValidationError is the validation error returned by
// RecommendListReply.Validate if the designated constraints aren't met.
type RecommendListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendListReplyValidationError) ErrorName() string {
	return "RecommendListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendListReplyValidationError{}

// Validate checks the field values on WithdrawRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WithdrawRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawRequestMultiError, or nil if none found.
func (m *WithdrawRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WithdrawRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WithdrawRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WithdrawRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WithdrawRequestMultiError(errors)
	}

	return nil
}

// WithdrawRequestMultiError is an error wrapping multiple validation errors
// returned by WithdrawRequest.ValidateAll() if the designated constraints
// aren't met.
type WithdrawRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawRequestMultiError) AllErrors() []error { return m }

// WithdrawRequestValidationError is the validation error returned by
// WithdrawRequest.Validate if the designated constraints aren't met.
type WithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawRequestValidationError) ErrorName() string { return "WithdrawRequestValidationError" }

// Error satisfies the builtin error interface
func (e WithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawRequestValidationError{}

// Validate checks the field values on WithdrawReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WithdrawReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WithdrawReplyMultiError, or
// nil if none found.
func (m *WithdrawReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return WithdrawReplyMultiError(errors)
	}

	return nil
}

// WithdrawReplyMultiError is an error wrapping multiple validation errors
// returned by WithdrawReply.ValidateAll() if the designated constraints
// aren't met.
type WithdrawReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawReplyMultiError) AllErrors() []error { return m }

// WithdrawReplyValidationError is the validation error returned by
// WithdrawReply.Validate if the designated constraints aren't met.
type WithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawReplyValidationError) ErrorName() string { return "WithdrawReplyValidationError" }

// Error satisfies the builtin error interface
func (e WithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawReplyValidationError{}

// Validate checks the field values on AdminRewardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminRewardListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminRewardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminRewardListRequestMultiError, or nil if none found.
func (m *AdminRewardListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminRewardListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Address

	// no validation rules for Reason

	if len(errors) > 0 {
		return AdminRewardListRequestMultiError(errors)
	}

	return nil
}

// AdminRewardListRequestMultiError is an error wrapping multiple validation
// errors returned by AdminRewardListRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminRewardListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminRewardListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminRewardListRequestMultiError) AllErrors() []error { return m }

// AdminRewardListRequestValidationError is the validation error returned by
// AdminRewardListRequest.Validate if the designated constraints aren't met.
type AdminRewardListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminRewardListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminRewardListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminRewardListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminRewardListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminRewardListRequestValidationError) ErrorName() string {
	return "AdminRewardListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminRewardListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminRewardListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminRewardListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminRewardListRequestValidationError{}

// Validate checks the field values on AdminRewardListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminRewardListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminRewardListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminRewardListReplyMultiError, or nil if none found.
func (m *AdminRewardListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminRewardListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminRewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminRewardListReplyValidationError{
						field:  fmt.Sprintf("Rewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminRewardListReplyValidationError{
					field:  fmt.Sprintf("Rewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminRewardListReplyMultiError(errors)
	}

	return nil
}

// AdminRewardListReplyMultiError is an error wrapping multiple validation
// errors returned by AdminRewardListReply.ValidateAll() if the designated
// constraints aren't met.
type AdminRewardListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminRewardListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminRewardListReplyMultiError) AllErrors() []error { return m }

// AdminRewardListReplyValidationError is the validation error returned by
// AdminRewardListReply.Validate if the designated constraints aren't met.
type AdminRewardListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminRewardListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminRewardListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminRewardListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminRewardListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminRewardListReplyValidationError) ErrorName() string {
	return "AdminRewardListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminRewardListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminRewardListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminRewardListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminRewardListReplyValidationError{}

// Validate checks the field values on AdminTradeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminTradeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminTradeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminTradeListRequestMultiError, or nil if none found.
func (m *AdminTradeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminTradeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Address

	if len(errors) > 0 {
		return AdminTradeListRequestMultiError(errors)
	}

	return nil
}

// AdminTradeListRequestMultiError is an error wrapping multiple validation
// errors returned by AdminTradeListRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminTradeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminTradeListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminTradeListRequestMultiError) AllErrors() []error { return m }

// AdminTradeListRequestValidationError is the validation error returned by
// AdminTradeListRequest.Validate if the designated constraints aren't met.
type AdminTradeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminTradeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminTradeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminTradeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminTradeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminTradeListRequestValidationError) ErrorName() string {
	return "AdminTradeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminTradeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminTradeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminTradeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminTradeListRequestValidationError{}

// Validate checks the field values on AdminTradeListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminTradeListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminTradeListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminTradeListReplyMultiError, or nil if none found.
func (m *AdminTradeListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminTradeListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTrades() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminTradeListReplyValidationError{
						field:  fmt.Sprintf("Trades[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminTradeListReplyValidationError{
						field:  fmt.Sprintf("Trades[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminTradeListReplyValidationError{
					field:  fmt.Sprintf("Trades[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminTradeListReplyMultiError(errors)
	}

	return nil
}

// AdminTradeListReplyMultiError is an error wrapping multiple validation
// errors returned by AdminTradeListReply.ValidateAll() if the designated
// constraints aren't met.
type AdminTradeListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminTradeListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminTradeListReplyMultiError) AllErrors() []error { return m }

// AdminTradeListReplyValidationError is the validation error returned by
// AdminTradeListReply.Validate if the designated constraints aren't met.
type AdminTradeListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminTradeListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminTradeListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminTradeListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminTradeListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminTradeListReplyValidationError) ErrorName() string {
	return "AdminTradeListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminTradeListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminTradeListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminTradeListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminTradeListReplyValidationError{}

// Validate checks the field values on LockSystemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LockSystemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockSystemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LockSystemRequestMultiError, or nil if none found.
func (m *LockSystemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LockSystemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LockSystemRequestMultiError(errors)
	}

	return nil
}

// LockSystemRequestMultiError is an error wrapping multiple validation errors
// returned by LockSystemRequest.ValidateAll() if the designated constraints
// aren't met.
type LockSystemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockSystemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockSystemRequestMultiError) AllErrors() []error { return m }

// LockSystemRequestValidationError is the validation error returned by
// LockSystemRequest.Validate if the designated constraints aren't met.
type LockSystemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockSystemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockSystemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockSystemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockSystemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockSystemRequestValidationError) ErrorName() string {
	return "LockSystemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LockSystemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockSystemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockSystemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockSystemRequestValidationError{}

// Validate checks the field values on LockSystemReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LockSystemReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockSystemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LockSystemReplyMultiError, or nil if none found.
func (m *LockSystemReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LockSystemReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LockSystemReplyMultiError(errors)
	}

	return nil
}

// LockSystemReplyMultiError is an error wrapping multiple validation errors
// returned by LockSystemReply.ValidateAll() if the designated constraints
// aren't met.
type LockSystemReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockSystemReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockSystemReplyMultiError) AllErrors() []error { return m }

// LockSystemReplyValidationError is the validation error returned by
// LockSystemReply.Validate if the designated constraints aren't met.
type LockSystemReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockSystemReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockSystemReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockSystemReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockSystemReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockSystemReplyValidationError) ErrorName() string { return "LockSystemReplyValidationError" }

// Error satisfies the builtin error interface
func (e LockSystemReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockSystemReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockSystemReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockSystemReplyValidationError{}

// Validate checks the field values on CheckAdminUserAreaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckAdminUserAreaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAdminUserAreaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAdminUserAreaRequestMultiError, or nil if none found.
func (m *CheckAdminUserAreaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAdminUserAreaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckAdminUserAreaRequestMultiError(errors)
	}

	return nil
}

// CheckAdminUserAreaRequestMultiError is an error wrapping multiple validation
// errors returned by CheckAdminUserAreaRequest.ValidateAll() if the
// designated constraints aren't met.
type CheckAdminUserAreaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAdminUserAreaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAdminUserAreaRequestMultiError) AllErrors() []error { return m }

// CheckAdminUserAreaRequestValidationError is the validation error returned by
// CheckAdminUserAreaRequest.Validate if the designated constraints aren't met.
type CheckAdminUserAreaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAdminUserAreaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAdminUserAreaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAdminUserAreaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAdminUserAreaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAdminUserAreaRequestValidationError) ErrorName() string {
	return "CheckAdminUserAreaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAdminUserAreaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAdminUserAreaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAdminUserAreaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAdminUserAreaRequestValidationError{}

// Validate checks the field values on CheckAdminUserAreaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckAdminUserAreaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAdminUserAreaReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAdminUserAreaReplyMultiError, or nil if none found.
func (m *CheckAdminUserAreaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAdminUserAreaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckAdminUserAreaReplyMultiError(errors)
	}

	return nil
}

// CheckAdminUserAreaReplyMultiError is an error wrapping multiple validation
// errors returned by CheckAdminUserAreaReply.ValidateAll() if the designated
// constraints aren't met.
type CheckAdminUserAreaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAdminUserAreaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAdminUserAreaReplyMultiError) AllErrors() []error { return m }

// CheckAdminUserAreaReplyValidationError is the validation error returned by
// CheckAdminUserAreaReply.Validate if the designated constraints aren't met.
type CheckAdminUserAreaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAdminUserAreaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAdminUserAreaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAdminUserAreaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAdminUserAreaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAdminUserAreaReplyValidationError) ErrorName() string {
	return "CheckAdminUserAreaReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAdminUserAreaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAdminUserAreaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAdminUserAreaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAdminUserAreaReplyValidationError{}

// Validate checks the field values on
// CheckAndInsertLocationsRecommendUserRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckAndInsertLocationsRecommendUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CheckAndInsertLocationsRecommendUserRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CheckAndInsertLocationsRecommendUserRequestMultiError, or nil if none found.
func (m *CheckAndInsertLocationsRecommendUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAndInsertLocationsRecommendUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckAndInsertLocationsRecommendUserRequestMultiError(errors)
	}

	return nil
}

// CheckAndInsertLocationsRecommendUserRequestMultiError is an error wrapping
// multiple validation errors returned by
// CheckAndInsertLocationsRecommendUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckAndInsertLocationsRecommendUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAndInsertLocationsRecommendUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAndInsertLocationsRecommendUserRequestMultiError) AllErrors() []error { return m }

// CheckAndInsertLocationsRecommendUserRequestValidationError is the validation
// error returned by CheckAndInsertLocationsRecommendUserRequest.Validate if
// the designated constraints aren't met.
type CheckAndInsertLocationsRecommendUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAndInsertLocationsRecommendUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAndInsertLocationsRecommendUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAndInsertLocationsRecommendUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAndInsertLocationsRecommendUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAndInsertLocationsRecommendUserRequestValidationError) ErrorName() string {
	return "CheckAndInsertLocationsRecommendUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAndInsertLocationsRecommendUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAndInsertLocationsRecommendUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAndInsertLocationsRecommendUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAndInsertLocationsRecommendUserRequestValidationError{}

// Validate checks the field values on
// CheckAndInsertLocationsRecommendUserReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckAndInsertLocationsRecommendUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CheckAndInsertLocationsRecommendUserReply with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CheckAndInsertLocationsRecommendUserReplyMultiError, or nil if none found.
func (m *CheckAndInsertLocationsRecommendUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAndInsertLocationsRecommendUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckAndInsertLocationsRecommendUserReplyMultiError(errors)
	}

	return nil
}

// CheckAndInsertLocationsRecommendUserReplyMultiError is an error wrapping
// multiple validation errors returned by
// CheckAndInsertLocationsRecommendUserReply.ValidateAll() if the designated
// constraints aren't met.
type CheckAndInsertLocationsRecommendUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAndInsertLocationsRecommendUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAndInsertLocationsRecommendUserReplyMultiError) AllErrors() []error { return m }

// CheckAndInsertLocationsRecommendUserReplyValidationError is the validation
// error returned by CheckAndInsertLocationsRecommendUserReply.Validate if the
// designated constraints aren't met.
type CheckAndInsertLocationsRecommendUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAndInsertLocationsRecommendUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAndInsertLocationsRecommendUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAndInsertLocationsRecommendUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAndInsertLocationsRecommendUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAndInsertLocationsRecommendUserReplyValidationError) ErrorName() string {
	return "CheckAndInsertLocationsRecommendUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAndInsertLocationsRecommendUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAndInsertLocationsRecommendUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAndInsertLocationsRecommendUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAndInsertLocationsRecommendUserReplyValidationError{}

// Validate checks the field values on AdminUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUserListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserListRequestMultiError, or nil if none found.
func (m *AdminUserListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Address

	// no validation rules for IsLocation

	// no validation rules for Vip

	if len(errors) > 0 {
		return AdminUserListRequestMultiError(errors)
	}

	return nil
}

// AdminUserListRequestMultiError is an error wrapping multiple validation
// errors returned by AdminUserListRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminUserListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserListRequestMultiError) AllErrors() []error { return m }

// AdminUserListRequestValidationError is the validation error returned by
// AdminUserListRequest.Validate if the designated constraints aren't met.
type AdminUserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserListRequestValidationError) ErrorName() string {
	return "AdminUserListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserListRequestValidationError{}

// Validate checks the field values on AdminUserListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUserListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserListReplyMultiError, or nil if none found.
func (m *AdminUserListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminUserListReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminUserListReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminUserListReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminUserListReplyMultiError(errors)
	}

	return nil
}

// AdminUserListReplyMultiError is an error wrapping multiple validation errors
// returned by AdminUserListReply.ValidateAll() if the designated constraints
// aren't met.
type AdminUserListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserListReplyMultiError) AllErrors() []error { return m }

// AdminUserListReplyValidationError is the validation error returned by
// AdminUserListReply.Validate if the designated constraints aren't met.
type AdminUserListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserListReplyValidationError) ErrorName() string {
	return "AdminUserListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUserListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserListReplyValidationError{}

// Validate checks the field values on RecordListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordListRequestMultiError, or nil if none found.
func (m *RecordListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Address

	// no validation rules for CoinType

	if len(errors) > 0 {
		return RecordListRequestMultiError(errors)
	}

	return nil
}

// RecordListRequestMultiError is an error wrapping multiple validation errors
// returned by RecordListRequest.ValidateAll() if the designated constraints
// aren't met.
type RecordListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordListRequestMultiError) AllErrors() []error { return m }

// RecordListRequestValidationError is the validation error returned by
// RecordListRequest.Validate if the designated constraints aren't met.
type RecordListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordListRequestValidationError) ErrorName() string {
	return "RecordListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecordListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordListRequestValidationError{}

// Validate checks the field values on RecordListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordListReplyMultiError, or nil if none found.
func (m *RecordListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecordListReplyValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecordListReplyValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecordListReplyValidationError{
					field:  fmt.Sprintf("Locations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return RecordListReplyMultiError(errors)
	}

	return nil
}

// RecordListReplyMultiError is an error wrapping multiple validation errors
// returned by RecordListReply.ValidateAll() if the designated constraints
// aren't met.
type RecordListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordListReplyMultiError) AllErrors() []error { return m }

// RecordListReplyValidationError is the validation error returned by
// RecordListReply.Validate if the designated constraints aren't met.
type RecordListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordListReplyValidationError) ErrorName() string { return "RecordListReplyValidationError" }

// Error satisfies the builtin error interface
func (e RecordListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordListReplyValidationError{}

// Validate checks the field values on AdminLocationListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminLocationListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLocationListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminLocationListRequestMultiError, or nil if none found.
func (m *AdminLocationListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLocationListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Address

	if len(errors) > 0 {
		return AdminLocationListRequestMultiError(errors)
	}

	return nil
}

// AdminLocationListRequestMultiError is an error wrapping multiple validation
// errors returned by AdminLocationListRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminLocationListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLocationListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLocationListRequestMultiError) AllErrors() []error { return m }

// AdminLocationListRequestValidationError is the validation error returned by
// AdminLocationListRequest.Validate if the designated constraints aren't met.
type AdminLocationListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLocationListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLocationListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLocationListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLocationListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLocationListRequestValidationError) ErrorName() string {
	return "AdminLocationListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLocationListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLocationListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLocationListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLocationListRequestValidationError{}

// Validate checks the field values on AdminLocationListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminLocationListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLocationListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminLocationListReplyMultiError, or nil if none found.
func (m *AdminLocationListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLocationListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminLocationListReplyValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminLocationListReplyValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminLocationListReplyValidationError{
					field:  fmt.Sprintf("Locations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminLocationListReplyMultiError(errors)
	}

	return nil
}

// AdminLocationListReplyMultiError is an error wrapping multiple validation
// errors returned by AdminLocationListReply.ValidateAll() if the designated
// constraints aren't met.
type AdminLocationListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLocationListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLocationListReplyMultiError) AllErrors() []error { return m }

// AdminLocationListReplyValidationError is the validation error returned by
// AdminLocationListReply.Validate if the designated constraints aren't met.
type AdminLocationListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLocationListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLocationListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLocationListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLocationListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLocationListReplyValidationError) ErrorName() string {
	return "AdminLocationListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLocationListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLocationListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLocationListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLocationListReplyValidationError{}

// Validate checks the field values on AdminLocationAllListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminLocationAllListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLocationAllListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminLocationAllListRequestMultiError, or nil if none found.
func (m *AdminLocationAllListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLocationAllListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Address

	if len(errors) > 0 {
		return AdminLocationAllListRequestMultiError(errors)
	}

	return nil
}

// AdminLocationAllListRequestMultiError is an error wrapping multiple
// validation errors returned by AdminLocationAllListRequest.ValidateAll() if
// the designated constraints aren't met.
type AdminLocationAllListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLocationAllListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLocationAllListRequestMultiError) AllErrors() []error { return m }

// AdminLocationAllListRequestValidationError is the validation error returned
// by AdminLocationAllListRequest.Validate if the designated constraints
// aren't met.
type AdminLocationAllListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLocationAllListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLocationAllListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLocationAllListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLocationAllListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLocationAllListRequestValidationError) ErrorName() string {
	return "AdminLocationAllListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLocationAllListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLocationAllListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLocationAllListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLocationAllListRequestValidationError{}

// Validate checks the field values on AdminLocationAllListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminLocationAllListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLocationAllListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminLocationAllListReplyMultiError, or nil if none found.
func (m *AdminLocationAllListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLocationAllListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminLocationAllListReplyValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminLocationAllListReplyValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminLocationAllListReplyValidationError{
					field:  fmt.Sprintf("Locations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminLocationAllListReplyMultiError(errors)
	}

	return nil
}

// AdminLocationAllListReplyMultiError is an error wrapping multiple validation
// errors returned by AdminLocationAllListReply.ValidateAll() if the
// designated constraints aren't met.
type AdminLocationAllListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLocationAllListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLocationAllListReplyMultiError) AllErrors() []error { return m }

// AdminLocationAllListReplyValidationError is the validation error returned by
// AdminLocationAllListReply.Validate if the designated constraints aren't met.
type AdminLocationAllListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLocationAllListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLocationAllListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLocationAllListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLocationAllListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLocationAllListReplyValidationError) ErrorName() string {
	return "AdminLocationAllListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLocationAllListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLocationAllListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLocationAllListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLocationAllListReplyValidationError{}

// Validate checks the field values on AdminWithdrawListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawListRequestMultiError, or nil if none found.
func (m *AdminWithdrawListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WithDrawType

	// no validation rules for Page

	// no validation rules for Address

	if len(errors) > 0 {
		return AdminWithdrawListRequestMultiError(errors)
	}

	return nil
}

// AdminWithdrawListRequestMultiError is an error wrapping multiple validation
// errors returned by AdminWithdrawListRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawListRequestMultiError) AllErrors() []error { return m }

// AdminWithdrawListRequestValidationError is the validation error returned by
// AdminWithdrawListRequest.Validate if the designated constraints aren't met.
type AdminWithdrawListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawListRequestValidationError) ErrorName() string {
	return "AdminWithdrawListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawListRequestValidationError{}

// Validate checks the field values on AdminWithdrawListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawListReplyMultiError, or nil if none found.
func (m *AdminWithdrawListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWithdraw() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminWithdrawListReplyValidationError{
						field:  fmt.Sprintf("Withdraw[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminWithdrawListReplyValidationError{
						field:  fmt.Sprintf("Withdraw[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminWithdrawListReplyValidationError{
					field:  fmt.Sprintf("Withdraw[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminWithdrawListReplyMultiError(errors)
	}

	return nil
}

// AdminWithdrawListReplyMultiError is an error wrapping multiple validation
// errors returned by AdminWithdrawListReply.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawListReplyMultiError) AllErrors() []error { return m }

// AdminWithdrawListReplyValidationError is the validation error returned by
// AdminWithdrawListReply.Validate if the designated constraints aren't met.
type AdminWithdrawListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawListReplyValidationError) ErrorName() string {
	return "AdminWithdrawListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawListReplyValidationError{}

// Validate checks the field values on AdminWithdrawRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawRequestMultiError, or nil if none found.
func (m *AdminWithdrawRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminWithdrawRequestMultiError(errors)
	}

	return nil
}

// AdminWithdrawRequestMultiError is an error wrapping multiple validation
// errors returned by AdminWithdrawRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawRequestMultiError) AllErrors() []error { return m }

// AdminWithdrawRequestValidationError is the validation error returned by
// AdminWithdrawRequest.Validate if the designated constraints aren't met.
type AdminWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawRequestValidationError) ErrorName() string {
	return "AdminWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawRequestValidationError{}

// Validate checks the field values on AdminWithdrawReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawReplyMultiError, or nil if none found.
func (m *AdminWithdrawReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminWithdrawReplyMultiError(errors)
	}

	return nil
}

// AdminWithdrawReplyMultiError is an error wrapping multiple validation errors
// returned by AdminWithdrawReply.ValidateAll() if the designated constraints
// aren't met.
type AdminWithdrawReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawReplyMultiError) AllErrors() []error { return m }

// AdminWithdrawReplyValidationError is the validation error returned by
// AdminWithdrawReply.Validate if the designated constraints aren't met.
type AdminWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawReplyValidationError) ErrorName() string {
	return "AdminWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawReplyValidationError{}

// Validate checks the field values on AdminTradeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminTradeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminTradeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminTradeRequestMultiError, or nil if none found.
func (m *AdminTradeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminTradeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminTradeRequestMultiError(errors)
	}

	return nil
}

// AdminTradeRequestMultiError is an error wrapping multiple validation errors
// returned by AdminTradeRequest.ValidateAll() if the designated constraints
// aren't met.
type AdminTradeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminTradeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminTradeRequestMultiError) AllErrors() []error { return m }

// AdminTradeRequestValidationError is the validation error returned by
// AdminTradeRequest.Validate if the designated constraints aren't met.
type AdminTradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminTradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminTradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminTradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminTradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminTradeRequestValidationError) ErrorName() string {
	return "AdminTradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminTradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminTradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminTradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminTradeRequestValidationError{}

// Validate checks the field values on AdminTradeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminTradeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminTradeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminTradeReplyMultiError, or nil if none found.
func (m *AdminTradeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminTradeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminTradeReplyMultiError(errors)
	}

	return nil
}

// AdminTradeReplyMultiError is an error wrapping multiple validation errors
// returned by AdminTradeReply.ValidateAll() if the designated constraints
// aren't met.
type AdminTradeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminTradeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminTradeReplyMultiError) AllErrors() []error { return m }

// AdminTradeReplyValidationError is the validation error returned by
// AdminTradeReply.Validate if the designated constraints aren't met.
type AdminTradeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminTradeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminTradeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminTradeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminTradeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminTradeReplyValidationError) ErrorName() string { return "AdminTradeReplyValidationError" }

// Error satisfies the builtin error interface
func (e AdminTradeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminTradeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminTradeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminTradeReplyValidationError{}

// Validate checks the field values on AdminWithdrawPassRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawPassRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawPassRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawPassRequestMultiError, or nil if none found.
func (m *AdminWithdrawPassRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawPassRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminWithdrawPassRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminWithdrawPassRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminWithdrawPassRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminWithdrawPassRequestMultiError(errors)
	}

	return nil
}

// AdminWithdrawPassRequestMultiError is an error wrapping multiple validation
// errors returned by AdminWithdrawPassRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawPassRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawPassRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawPassRequestMultiError) AllErrors() []error { return m }

// AdminWithdrawPassRequestValidationError is the validation error returned by
// AdminWithdrawPassRequest.Validate if the designated constraints aren't met.
type AdminWithdrawPassRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawPassRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawPassRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawPassRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawPassRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawPassRequestValidationError) ErrorName() string {
	return "AdminWithdrawPassRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawPassRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawPassRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawPassRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawPassRequestValidationError{}

// Validate checks the field values on AdminWithdrawPassReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawPassReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawPassReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawPassReplyMultiError, or nil if none found.
func (m *AdminWithdrawPassReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawPassReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminWithdrawPassReplyMultiError(errors)
	}

	return nil
}

// AdminWithdrawPassReplyMultiError is an error wrapping multiple validation
// errors returned by AdminWithdrawPassReply.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawPassReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawPassReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawPassReplyMultiError) AllErrors() []error { return m }

// AdminWithdrawPassReplyValidationError is the validation error returned by
// AdminWithdrawPassReply.Validate if the designated constraints aren't met.
type AdminWithdrawPassReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawPassReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawPassReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawPassReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawPassReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawPassReplyValidationError) ErrorName() string {
	return "AdminWithdrawPassReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawPassReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawPassReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawPassReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawPassReplyValidationError{}

// Validate checks the field values on AdminWithdrawEthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawEthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawEthRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawEthRequestMultiError, or nil if none found.
func (m *AdminWithdrawEthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawEthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminWithdrawEthRequestMultiError(errors)
	}

	return nil
}

// AdminWithdrawEthRequestMultiError is an error wrapping multiple validation
// errors returned by AdminWithdrawEthRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawEthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawEthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawEthRequestMultiError) AllErrors() []error { return m }

// AdminWithdrawEthRequestValidationError is the validation error returned by
// AdminWithdrawEthRequest.Validate if the designated constraints aren't met.
type AdminWithdrawEthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawEthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawEthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawEthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawEthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawEthRequestValidationError) ErrorName() string {
	return "AdminWithdrawEthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawEthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawEthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawEthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawEthRequestValidationError{}

// Validate checks the field values on AdminWithdrawEthReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawEthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawEthReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawEthReplyMultiError, or nil if none found.
func (m *AdminWithdrawEthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawEthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminWithdrawEthReplyMultiError(errors)
	}

	return nil
}

// AdminWithdrawEthReplyMultiError is an error wrapping multiple validation
// errors returned by AdminWithdrawEthReply.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawEthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawEthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawEthReplyMultiError) AllErrors() []error { return m }

// AdminWithdrawEthReplyValidationError is the validation error returned by
// AdminWithdrawEthReply.Validate if the designated constraints aren't met.
type AdminWithdrawEthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawEthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawEthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawEthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawEthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawEthReplyValidationError) ErrorName() string {
	return "AdminWithdrawEthReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawEthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawEthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawEthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawEthReplyValidationError{}

// Validate checks the field values on AdminFeeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminFeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminFeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminFeeRequestMultiError, or nil if none found.
func (m *AdminFeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminFeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminFeeRequestMultiError(errors)
	}

	return nil
}

// AdminFeeRequestMultiError is an error wrapping multiple validation errors
// returned by AdminFeeRequest.ValidateAll() if the designated constraints
// aren't met.
type AdminFeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminFeeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminFeeRequestMultiError) AllErrors() []error { return m }

// AdminFeeRequestValidationError is the validation error returned by
// AdminFeeRequest.Validate if the designated constraints aren't met.
type AdminFeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminFeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminFeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminFeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminFeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminFeeRequestValidationError) ErrorName() string { return "AdminFeeRequestValidationError" }

// Error satisfies the builtin error interface
func (e AdminFeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminFeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminFeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminFeeRequestValidationError{}

// Validate checks the field values on AdminFeeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminFeeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminFeeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminFeeReplyMultiError, or
// nil if none found.
func (m *AdminFeeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminFeeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminFeeReplyMultiError(errors)
	}

	return nil
}

// AdminFeeReplyMultiError is an error wrapping multiple validation errors
// returned by AdminFeeReply.ValidateAll() if the designated constraints
// aren't met.
type AdminFeeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminFeeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminFeeReplyMultiError) AllErrors() []error { return m }

// AdminFeeReplyValidationError is the validation error returned by
// AdminFeeReply.Validate if the designated constraints aren't met.
type AdminFeeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminFeeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminFeeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminFeeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminFeeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminFeeReplyValidationError) ErrorName() string { return "AdminFeeReplyValidationError" }

// Error satisfies the builtin error interface
func (e AdminFeeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminFeeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminFeeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminFeeReplyValidationError{}

// Validate checks the field values on AdminDailyFeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminDailyFeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminDailyFeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminDailyFeeRequestMultiError, or nil if none found.
func (m *AdminDailyFeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminDailyFeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Day

	if len(errors) > 0 {
		return AdminDailyFeeRequestMultiError(errors)
	}

	return nil
}

// AdminDailyFeeRequestMultiError is an error wrapping multiple validation
// errors returned by AdminDailyFeeRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminDailyFeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminDailyFeeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminDailyFeeRequestMultiError) AllErrors() []error { return m }

// AdminDailyFeeRequestValidationError is the validation error returned by
// AdminDailyFeeRequest.Validate if the designated constraints aren't met.
type AdminDailyFeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDailyFeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDailyFeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDailyFeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDailyFeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDailyFeeRequestValidationError) ErrorName() string {
	return "AdminDailyFeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDailyFeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDailyFeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDailyFeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDailyFeeRequestValidationError{}

// Validate checks the field values on AdminDailyFeeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminDailyFeeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminDailyFeeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminDailyFeeReplyMultiError, or nil if none found.
func (m *AdminDailyFeeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminDailyFeeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminDailyFeeReplyMultiError(errors)
	}

	return nil
}

// AdminDailyFeeReplyMultiError is an error wrapping multiple validation errors
// returned by AdminDailyFeeReply.ValidateAll() if the designated constraints
// aren't met.
type AdminDailyFeeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminDailyFeeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminDailyFeeReplyMultiError) AllErrors() []error { return m }

// AdminDailyFeeReplyValidationError is the validation error returned by
// AdminDailyFeeReply.Validate if the designated constraints aren't met.
type AdminDailyFeeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDailyFeeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDailyFeeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDailyFeeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDailyFeeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDailyFeeReplyValidationError) ErrorName() string {
	return "AdminDailyFeeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDailyFeeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDailyFeeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDailyFeeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDailyFeeReplyValidationError{}

// Validate checks the field values on AdminAllRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAllRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminAllRequestMultiError, or nil if none found.
func (m *AdminAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminAllRequestMultiError(errors)
	}

	return nil
}

// AdminAllRequestMultiError is an error wrapping multiple validation errors
// returned by AdminAllRequest.ValidateAll() if the designated constraints
// aren't met.
type AdminAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAllRequestMultiError) AllErrors() []error { return m }

// AdminAllRequestValidationError is the validation error returned by
// AdminAllRequest.Validate if the designated constraints aren't met.
type AdminAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAllRequestValidationError) ErrorName() string { return "AdminAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e AdminAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAllRequestValidationError{}

// Validate checks the field values on AdminAllReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminAllReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAllReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminAllReplyMultiError, or
// nil if none found.
func (m *AdminAllReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAllReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TodayTotalUser

	// no validation rules for LocationCount

	// no validation rules for TotalUser

	// no validation rules for AllBalance

	// no validation rules for AllBalanceBtc

	// no validation rules for TodayLocation

	// no validation rules for AllLocation

	// no validation rules for TodayWithdraw

	// no validation rules for AllWithdraw

	// no validation rules for TotalH

	// no validation rules for AllBalanceH

	// no validation rules for TodayWithdrawH

	// no validation rules for WithdrawH

	// no validation rules for TotalC

	// no validation rules for AmountCsd

	// no validation rules for AmountHbs

	// no validation rules for AllWithdrawBtc

	// no validation rules for TodayWithdrawBtc

	// no validation rules for AllReward

	// no validation rules for AllSystemRewardAndFee

	// no validation rules for BalanceReward

	// no validation rules for BalanceRewardRewarded

	// no validation rules for UserBalanceLockUsdtTotal

	// no validation rules for UserLocationNewCurrent

	if len(errors) > 0 {
		return AdminAllReplyMultiError(errors)
	}

	return nil
}

// AdminAllReplyMultiError is an error wrapping multiple validation errors
// returned by AdminAllReply.ValidateAll() if the designated constraints
// aren't met.
type AdminAllReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAllReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAllReplyMultiError) AllErrors() []error { return m }

// AdminAllReplyValidationError is the validation error returned by
// AdminAllReply.Validate if the designated constraints aren't met.
type AdminAllReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAllReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAllReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAllReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAllReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAllReplyValidationError) ErrorName() string { return "AdminAllReplyValidationError" }

// Error satisfies the builtin error interface
func (e AdminAllReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAllReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAllReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAllReplyValidationError{}

// Validate checks the field values on AdminUserRecommendRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUserRecommendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserRecommendRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserRecommendRequestMultiError, or nil if none found.
func (m *AdminUserRecommendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserRecommendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Address

	if len(errors) > 0 {
		return AdminUserRecommendRequestMultiError(errors)
	}

	return nil
}

// AdminUserRecommendRequestMultiError is an error wrapping multiple validation
// errors returned by AdminUserRecommendRequest.ValidateAll() if the
// designated constraints aren't met.
type AdminUserRecommendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserRecommendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserRecommendRequestMultiError) AllErrors() []error { return m }

// AdminUserRecommendRequestValidationError is the validation error returned by
// AdminUserRecommendRequest.Validate if the designated constraints aren't met.
type AdminUserRecommendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserRecommendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserRecommendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserRecommendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserRecommendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserRecommendRequestValidationError) ErrorName() string {
	return "AdminUserRecommendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUserRecommendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserRecommendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserRecommendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserRecommendRequestValidationError{}

// Validate checks the field values on AdminUserRecommendReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUserRecommendReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserRecommendReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserRecommendReplyMultiError, or nil if none found.
func (m *AdminUserRecommendReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserRecommendReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminUserRecommendReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminUserRecommendReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminUserRecommendReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminUserRecommendReplyMultiError(errors)
	}

	return nil
}

// AdminUserRecommendReplyMultiError is an error wrapping multiple validation
// errors returned by AdminUserRecommendReply.ValidateAll() if the designated
// constraints aren't met.
type AdminUserRecommendReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserRecommendReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserRecommendReplyMultiError) AllErrors() []error { return m }

// AdminUserRecommendReplyValidationError is the validation error returned by
// AdminUserRecommendReply.Validate if the designated constraints aren't met.
type AdminUserRecommendReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserRecommendReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserRecommendReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserRecommendReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserRecommendReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserRecommendReplyValidationError) ErrorName() string {
	return "AdminUserRecommendReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUserRecommendReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserRecommendReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserRecommendReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserRecommendReplyValidationError{}

// Validate checks the field values on AdminMonthRecommendRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminMonthRecommendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminMonthRecommendRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminMonthRecommendRequestMultiError, or nil if none found.
func (m *AdminMonthRecommendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminMonthRecommendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Page

	if len(errors) > 0 {
		return AdminMonthRecommendRequestMultiError(errors)
	}

	return nil
}

// AdminMonthRecommendRequestMultiError is an error wrapping multiple
// validation errors returned by AdminMonthRecommendRequest.ValidateAll() if
// the designated constraints aren't met.
type AdminMonthRecommendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminMonthRecommendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminMonthRecommendRequestMultiError) AllErrors() []error { return m }

// AdminMonthRecommendRequestValidationError is the validation error returned
// by AdminMonthRecommendRequest.Validate if the designated constraints aren't met.
type AdminMonthRecommendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminMonthRecommendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminMonthRecommendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminMonthRecommendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminMonthRecommendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminMonthRecommendRequestValidationError) ErrorName() string {
	return "AdminMonthRecommendRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminMonthRecommendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminMonthRecommendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminMonthRecommendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminMonthRecommendRequestValidationError{}

// Validate checks the field values on AdminMonthRecommendReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminMonthRecommendReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminMonthRecommendReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminMonthRecommendReplyMultiError, or nil if none found.
func (m *AdminMonthRecommendReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminMonthRecommendReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminMonthRecommendReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminMonthRecommendReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminMonthRecommendReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminMonthRecommendReplyMultiError(errors)
	}

	return nil
}

// AdminMonthRecommendReplyMultiError is an error wrapping multiple validation
// errors returned by AdminMonthRecommendReply.ValidateAll() if the designated
// constraints aren't met.
type AdminMonthRecommendReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminMonthRecommendReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminMonthRecommendReplyMultiError) AllErrors() []error { return m }

// AdminMonthRecommendReplyValidationError is the validation error returned by
// AdminMonthRecommendReply.Validate if the designated constraints aren't met.
type AdminMonthRecommendReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminMonthRecommendReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminMonthRecommendReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminMonthRecommendReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminMonthRecommendReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminMonthRecommendReplyValidationError) ErrorName() string {
	return "AdminMonthRecommendReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminMonthRecommendReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminMonthRecommendReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminMonthRecommendReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminMonthRecommendReplyValidationError{}

// Validate checks the field values on AdminConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminConfigRequestMultiError, or nil if none found.
func (m *AdminConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Page

	if len(errors) > 0 {
		return AdminConfigRequestMultiError(errors)
	}

	return nil
}

// AdminConfigRequestMultiError is an error wrapping multiple validation errors
// returned by AdminConfigRequest.ValidateAll() if the designated constraints
// aren't met.
type AdminConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminConfigRequestMultiError) AllErrors() []error { return m }

// AdminConfigRequestValidationError is the validation error returned by
// AdminConfigRequest.Validate if the designated constraints aren't met.
type AdminConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminConfigRequestValidationError) ErrorName() string {
	return "AdminConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminConfigRequestValidationError{}

// Validate checks the field values on AdminConfigReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminConfigReplyMultiError, or nil if none found.
func (m *AdminConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfig() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminConfigReplyValidationError{
						field:  fmt.Sprintf("Config[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminConfigReplyValidationError{
						field:  fmt.Sprintf("Config[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminConfigReplyValidationError{
					field:  fmt.Sprintf("Config[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return AdminConfigReplyMultiError(errors)
	}

	return nil
}

// AdminConfigReplyMultiError is an error wrapping multiple validation errors
// returned by AdminConfigReply.ValidateAll() if the designated constraints
// aren't met.
type AdminConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminConfigReplyMultiError) AllErrors() []error { return m }

// AdminConfigReplyValidationError is the validation error returned by
// AdminConfigReply.Validate if the designated constraints aren't met.
type AdminConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminConfigReplyValidationError) ErrorName() string { return "AdminConfigReplyValidationError" }

// Error satisfies the builtin error interface
func (e AdminConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminConfigReplyValidationError{}

// Validate checks the field values on AdminListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminListRequestMultiError, or nil if none found.
func (m *AdminListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminListRequestMultiError(errors)
	}

	return nil
}

// AdminListRequestMultiError is an error wrapping multiple validation errors
// returned by AdminListRequest.ValidateAll() if the designated constraints
// aren't met.
type AdminListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminListRequestMultiError) AllErrors() []error { return m }

// AdminListRequestValidationError is the validation error returned by
// AdminListRequest.Validate if the designated constraints aren't met.
type AdminListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminListRequestValidationError) ErrorName() string { return "AdminListRequestValidationError" }

// Error satisfies the builtin error interface
func (e AdminListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminListRequestValidationError{}

// Validate checks the field values on AdminListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminListReplyMultiError,
// or nil if none found.
func (m *AdminListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminListReplyValidationError{
						field:  fmt.Sprintf("Account[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminListReplyValidationError{
						field:  fmt.Sprintf("Account[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminListReplyValidationError{
					field:  fmt.Sprintf("Account[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminListReplyMultiError(errors)
	}

	return nil
}

// AdminListReplyMultiError is an error wrapping multiple validation errors
// returned by AdminListReply.ValidateAll() if the designated constraints
// aren't met.
type AdminListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminListReplyMultiError) AllErrors() []error { return m }

// AdminListReplyValidationError is the validation error returned by
// AdminListReply.Validate if the designated constraints aren't met.
type AdminListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminListReplyValidationError) ErrorName() string { return "AdminListReplyValidationError" }

// Error satisfies the builtin error interface
func (e AdminListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminListReplyValidationError{}

// Validate checks the field values on AuthListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthListRequestMultiError, or nil if none found.
func (m *AuthListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthListRequestMultiError(errors)
	}

	return nil
}

// AuthListRequestMultiError is an error wrapping multiple validation errors
// returned by AuthListRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthListRequestMultiError) AllErrors() []error { return m }

// AuthListRequestValidationError is the validation error returned by
// AuthListRequest.Validate if the designated constraints aren't met.
type AuthListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthListRequestValidationError) ErrorName() string { return "AuthListRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthListRequestValidationError{}

// Validate checks the field values on AuthListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthListReplyMultiError, or
// nil if none found.
func (m *AuthListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAuth() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthListReplyValidationError{
						field:  fmt.Sprintf("Auth[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthListReplyValidationError{
						field:  fmt.Sprintf("Auth[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthListReplyValidationError{
					field:  fmt.Sprintf("Auth[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuthListReplyMultiError(errors)
	}

	return nil
}

// AuthListReplyMultiError is an error wrapping multiple validation errors
// returned by AuthListReply.ValidateAll() if the designated constraints
// aren't met.
type AuthListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthListReplyMultiError) AllErrors() []error { return m }

// AuthListReplyValidationError is the validation error returned by
// AuthListReply.Validate if the designated constraints aren't met.
type AuthListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthListReplyValidationError) ErrorName() string { return "AuthListReplyValidationError" }

// Error satisfies the builtin error interface
func (e AuthListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthListReplyValidationError{}

// Validate checks the field values on UserAuthListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserAuthListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAuthListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserAuthListRequestMultiError, or nil if none found.
func (m *UserAuthListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAuthListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminId

	if len(errors) > 0 {
		return UserAuthListRequestMultiError(errors)
	}

	return nil
}

// UserAuthListRequestMultiError is an error wrapping multiple validation
// errors returned by UserAuthListRequest.ValidateAll() if the designated
// constraints aren't met.
type UserAuthListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAuthListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAuthListRequestMultiError) AllErrors() []error { return m }

// UserAuthListRequestValidationError is the validation error returned by
// UserAuthListRequest.Validate if the designated constraints aren't met.
type UserAuthListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAuthListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAuthListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAuthListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAuthListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAuthListRequestValidationError) ErrorName() string {
	return "UserAuthListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserAuthListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAuthListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAuthListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAuthListRequestValidationError{}

// Validate checks the field values on UserAuthListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserAuthListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAuthListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserAuthListReplyMultiError, or nil if none found.
func (m *UserAuthListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAuthListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAuth() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserAuthListReplyValidationError{
						field:  fmt.Sprintf("Auth[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserAuthListReplyValidationError{
						field:  fmt.Sprintf("Auth[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserAuthListReplyValidationError{
					field:  fmt.Sprintf("Auth[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserAuthListReplyMultiError(errors)
	}

	return nil
}

// UserAuthListReplyMultiError is an error wrapping multiple validation errors
// returned by UserAuthListReply.ValidateAll() if the designated constraints
// aren't met.
type UserAuthListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAuthListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAuthListReplyMultiError) AllErrors() []error { return m }

// UserAuthListReplyValidationError is the validation error returned by
// UserAuthListReply.Validate if the designated constraints aren't met.
type UserAuthListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAuthListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAuthListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAuthListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAuthListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAuthListReplyValidationError) ErrorName() string {
	return "UserAuthListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserAuthListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAuthListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAuthListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAuthListReplyValidationError{}

// Validate checks the field values on MyAuthListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MyAuthListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyAuthListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MyAuthListRequestMultiError, or nil if none found.
func (m *MyAuthListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MyAuthListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MyAuthListRequestMultiError(errors)
	}

	return nil
}

// MyAuthListRequestMultiError is an error wrapping multiple validation errors
// returned by MyAuthListRequest.ValidateAll() if the designated constraints
// aren't met.
type MyAuthListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyAuthListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyAuthListRequestMultiError) AllErrors() []error { return m }

// MyAuthListRequestValidationError is the validation error returned by
// MyAuthListRequest.Validate if the designated constraints aren't met.
type MyAuthListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyAuthListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyAuthListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyAuthListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyAuthListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyAuthListRequestValidationError) ErrorName() string {
	return "MyAuthListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MyAuthListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyAuthListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyAuthListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyAuthListRequestValidationError{}

// Validate checks the field values on MyAuthListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MyAuthListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyAuthListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MyAuthListReplyMultiError, or nil if none found.
func (m *MyAuthListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MyAuthListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAuth() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MyAuthListReplyValidationError{
						field:  fmt.Sprintf("Auth[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MyAuthListReplyValidationError{
						field:  fmt.Sprintf("Auth[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MyAuthListReplyValidationError{
					field:  fmt.Sprintf("Auth[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Super

	if len(errors) > 0 {
		return MyAuthListReplyMultiError(errors)
	}

	return nil
}

// MyAuthListReplyMultiError is an error wrapping multiple validation errors
// returned by MyAuthListReply.ValidateAll() if the designated constraints
// aren't met.
type MyAuthListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyAuthListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyAuthListReplyMultiError) AllErrors() []error { return m }

// MyAuthListReplyValidationError is the validation error returned by
// MyAuthListReply.Validate if the designated constraints aren't met.
type MyAuthListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyAuthListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyAuthListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyAuthListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyAuthListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyAuthListReplyValidationError) ErrorName() string { return "MyAuthListReplyValidationError" }

// Error satisfies the builtin error interface
func (e MyAuthListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyAuthListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyAuthListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyAuthListReplyValidationError{}

// Validate checks the field values on AdminConfigUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminConfigUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminConfigUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminConfigUpdateRequestMultiError, or nil if none found.
func (m *AdminConfigUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminConfigUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminConfigUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminConfigUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminConfigUpdateRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminConfigUpdateRequestMultiError(errors)
	}

	return nil
}

// AdminConfigUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by AdminConfigUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminConfigUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminConfigUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminConfigUpdateRequestMultiError) AllErrors() []error { return m }

// AdminConfigUpdateRequestValidationError is the validation error returned by
// AdminConfigUpdateRequest.Validate if the designated constraints aren't met.
type AdminConfigUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminConfigUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminConfigUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminConfigUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminConfigUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminConfigUpdateRequestValidationError) ErrorName() string {
	return "AdminConfigUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminConfigUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminConfigUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminConfigUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminConfigUpdateRequestValidationError{}

// Validate checks the field values on AdminConfigUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminConfigUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminConfigUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminConfigUpdateReplyMultiError, or nil if none found.
func (m *AdminConfigUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminConfigUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminConfigUpdateReplyMultiError(errors)
	}

	return nil
}

// AdminConfigUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by AdminConfigUpdateReply.ValidateAll() if the designated
// constraints aren't met.
type AdminConfigUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminConfigUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminConfigUpdateReplyMultiError) AllErrors() []error { return m }

// AdminConfigUpdateReplyValidationError is the validation error returned by
// AdminConfigUpdateReply.Validate if the designated constraints aren't met.
type AdminConfigUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminConfigUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminConfigUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminConfigUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminConfigUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminConfigUpdateReplyValidationError) ErrorName() string {
	return "AdminConfigUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminConfigUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminConfigUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminConfigUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminConfigUpdateReplyValidationError{}

// Validate checks the field values on AdminPasswordUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminPasswordUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminPasswordUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminPasswordUpdateRequestMultiError, or nil if none found.
func (m *AdminPasswordUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminPasswordUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminPasswordUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminPasswordUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminPasswordUpdateRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminPasswordUpdateRequestMultiError(errors)
	}

	return nil
}

// AdminPasswordUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by AdminPasswordUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type AdminPasswordUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminPasswordUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminPasswordUpdateRequestMultiError) AllErrors() []error { return m }

// AdminPasswordUpdateRequestValidationError is the validation error returned
// by AdminPasswordUpdateRequest.Validate if the designated constraints aren't met.
type AdminPasswordUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminPasswordUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminPasswordUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminPasswordUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminPasswordUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminPasswordUpdateRequestValidationError) ErrorName() string {
	return "AdminPasswordUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminPasswordUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminPasswordUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminPasswordUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminPasswordUpdateRequestValidationError{}

// Validate checks the field values on AdminPasswordUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminPasswordUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminPasswordUpdateReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminPasswordUpdateReplyMultiError, or nil if none found.
func (m *AdminPasswordUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminPasswordUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminPasswordUpdateReplyMultiError(errors)
	}

	return nil
}

// AdminPasswordUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by AdminPasswordUpdateReply.ValidateAll() if the designated
// constraints aren't met.
type AdminPasswordUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminPasswordUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminPasswordUpdateReplyMultiError) AllErrors() []error { return m }

// AdminPasswordUpdateReplyValidationError is the validation error returned by
// AdminPasswordUpdateReply.Validate if the designated constraints aren't met.
type AdminPasswordUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminPasswordUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminPasswordUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminPasswordUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminPasswordUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminPasswordUpdateReplyValidationError) ErrorName() string {
	return "AdminPasswordUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminPasswordUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminPasswordUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminPasswordUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminPasswordUpdateReplyValidationError{}

// Validate checks the field values on AdminUpdateLocationNewMaxRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminUpdateLocationNewMaxRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdateLocationNewMaxRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminUpdateLocationNewMaxRequestMultiError, or nil if none found.
func (m *AdminUpdateLocationNewMaxRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateLocationNewMaxRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateLocationNewMaxRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateLocationNewMaxRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateLocationNewMaxRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminUpdateLocationNewMaxRequestMultiError(errors)
	}

	return nil
}

// AdminUpdateLocationNewMaxRequestMultiError is an error wrapping multiple
// validation errors returned by
// AdminUpdateLocationNewMaxRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminUpdateLocationNewMaxRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateLocationNewMaxRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateLocationNewMaxRequestMultiError) AllErrors() []error { return m }

// AdminUpdateLocationNewMaxRequestValidationError is the validation error
// returned by AdminUpdateLocationNewMaxRequest.Validate if the designated
// constraints aren't met.
type AdminUpdateLocationNewMaxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateLocationNewMaxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateLocationNewMaxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateLocationNewMaxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateLocationNewMaxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateLocationNewMaxRequestValidationError) ErrorName() string {
	return "AdminUpdateLocationNewMaxRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdateLocationNewMaxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateLocationNewMaxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateLocationNewMaxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateLocationNewMaxRequestValidationError{}

// Validate checks the field values on AdminUpdateLocationNewMaxReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUpdateLocationNewMaxReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdateLocationNewMaxReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminUpdateLocationNewMaxReplyMultiError, or nil if none found.
func (m *AdminUpdateLocationNewMaxReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateLocationNewMaxReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminUpdateLocationNewMaxReplyMultiError(errors)
	}

	return nil
}

// AdminUpdateLocationNewMaxReplyMultiError is an error wrapping multiple
// validation errors returned by AdminUpdateLocationNewMaxReply.ValidateAll()
// if the designated constraints aren't met.
type AdminUpdateLocationNewMaxReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateLocationNewMaxReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateLocationNewMaxReplyMultiError) AllErrors() []error { return m }

// AdminUpdateLocationNewMaxReplyValidationError is the validation error
// returned by AdminUpdateLocationNewMaxReply.Validate if the designated
// constraints aren't met.
type AdminUpdateLocationNewMaxReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateLocationNewMaxReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateLocationNewMaxReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateLocationNewMaxReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateLocationNewMaxReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateLocationNewMaxReplyValidationError) ErrorName() string {
	return "AdminUpdateLocationNewMaxReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdateLocationNewMaxReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateLocationNewMaxReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateLocationNewMaxReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateLocationNewMaxReplyValidationError{}

// Validate checks the field values on AdminVipUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminVipUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminVipUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminVipUpdateRequestMultiError, or nil if none found.
func (m *AdminVipUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminVipUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminVipUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminVipUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminVipUpdateRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminVipUpdateRequestMultiError(errors)
	}

	return nil
}

// AdminVipUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by AdminVipUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminVipUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminVipUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminVipUpdateRequestMultiError) AllErrors() []error { return m }

// AdminVipUpdateRequestValidationError is the validation error returned by
// AdminVipUpdateRequest.Validate if the designated constraints aren't met.
type AdminVipUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminVipUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminVipUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminVipUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminVipUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminVipUpdateRequestValidationError) ErrorName() string {
	return "AdminVipUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminVipUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminVipUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminVipUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminVipUpdateRequestValidationError{}

// Validate checks the field values on AdminVipUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminVipUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminVipUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminVipUpdateReplyMultiError, or nil if none found.
func (m *AdminVipUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminVipUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminVipUpdateReplyMultiError(errors)
	}

	return nil
}

// AdminVipUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by AdminVipUpdateReply.ValidateAll() if the designated
// constraints aren't met.
type AdminVipUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminVipUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminVipUpdateReplyMultiError) AllErrors() []error { return m }

// AdminVipUpdateReplyValidationError is the validation error returned by
// AdminVipUpdateReply.Validate if the designated constraints aren't met.
type AdminVipUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminVipUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminVipUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminVipUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminVipUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminVipUpdateReplyValidationError) ErrorName() string {
	return "AdminVipUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminVipUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminVipUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminVipUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminVipUpdateReplyValidationError{}

// Validate checks the field values on AdminUndoUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUndoUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUndoUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUndoUpdateRequestMultiError, or nil if none found.
func (m *AdminUndoUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUndoUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUndoUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUndoUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUndoUpdateRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminUndoUpdateRequestMultiError(errors)
	}

	return nil
}

// AdminUndoUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by AdminUndoUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminUndoUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUndoUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUndoUpdateRequestMultiError) AllErrors() []error { return m }

// AdminUndoUpdateRequestValidationError is the validation error returned by
// AdminUndoUpdateRequest.Validate if the designated constraints aren't met.
type AdminUndoUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUndoUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUndoUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUndoUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUndoUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUndoUpdateRequestValidationError) ErrorName() string {
	return "AdminUndoUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUndoUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUndoUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUndoUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUndoUpdateRequestValidationError{}

// Validate checks the field values on AdminUndoUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUndoUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUndoUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUndoUpdateReplyMultiError, or nil if none found.
func (m *AdminUndoUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUndoUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminUndoUpdateReplyMultiError(errors)
	}

	return nil
}

// AdminUndoUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by AdminUndoUpdateReply.ValidateAll() if the designated
// constraints aren't met.
type AdminUndoUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUndoUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUndoUpdateReplyMultiError) AllErrors() []error { return m }

// AdminUndoUpdateReplyValidationError is the validation error returned by
// AdminUndoUpdateReply.Validate if the designated constraints aren't met.
type AdminUndoUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUndoUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUndoUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUndoUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUndoUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUndoUpdateReplyValidationError) ErrorName() string {
	return "AdminUndoUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUndoUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUndoUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUndoUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUndoUpdateReplyValidationError{}

// Validate checks the field values on AdminAreaLevelUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminAreaLevelUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAreaLevelUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminAreaLevelUpdateRequestMultiError, or nil if none found.
func (m *AdminAreaLevelUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAreaLevelUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminAreaLevelUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminAreaLevelUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminAreaLevelUpdateRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminAreaLevelUpdateRequestMultiError(errors)
	}

	return nil
}

// AdminAreaLevelUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by AdminAreaLevelUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type AdminAreaLevelUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAreaLevelUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAreaLevelUpdateRequestMultiError) AllErrors() []error { return m }

// AdminAreaLevelUpdateRequestValidationError is the validation error returned
// by AdminAreaLevelUpdateRequest.Validate if the designated constraints
// aren't met.
type AdminAreaLevelUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAreaLevelUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAreaLevelUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAreaLevelUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAreaLevelUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAreaLevelUpdateRequestValidationError) ErrorName() string {
	return "AdminAreaLevelUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAreaLevelUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAreaLevelUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAreaLevelUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAreaLevelUpdateRequestValidationError{}

// Validate checks the field values on AdminAreaLevelUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminAreaLevelUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAreaLevelUpdateReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminAreaLevelUpdateReplyMultiError, or nil if none found.
func (m *AdminAreaLevelUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAreaLevelUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminAreaLevelUpdateReplyMultiError(errors)
	}

	return nil
}

// AdminAreaLevelUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by AdminAreaLevelUpdateReply.ValidateAll() if the
// designated constraints aren't met.
type AdminAreaLevelUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAreaLevelUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAreaLevelUpdateReplyMultiError) AllErrors() []error { return m }

// AdminAreaLevelUpdateReplyValidationError is the validation error returned by
// AdminAreaLevelUpdateReply.Validate if the designated constraints aren't met.
type AdminAreaLevelUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAreaLevelUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAreaLevelUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAreaLevelUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAreaLevelUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAreaLevelUpdateReplyValidationError) ErrorName() string {
	return "AdminAreaLevelUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAreaLevelUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAreaLevelUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAreaLevelUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAreaLevelUpdateReplyValidationError{}

// Validate checks the field values on AdminLocationInsertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminLocationInsertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLocationInsertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminLocationInsertRequestMultiError, or nil if none found.
func (m *AdminLocationInsertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLocationInsertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminLocationInsertRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminLocationInsertRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminLocationInsertRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminLocationInsertRequestMultiError(errors)
	}

	return nil
}

// AdminLocationInsertRequestMultiError is an error wrapping multiple
// validation errors returned by AdminLocationInsertRequest.ValidateAll() if
// the designated constraints aren't met.
type AdminLocationInsertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLocationInsertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLocationInsertRequestMultiError) AllErrors() []error { return m }

// AdminLocationInsertRequestValidationError is the validation error returned
// by AdminLocationInsertRequest.Validate if the designated constraints aren't met.
type AdminLocationInsertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLocationInsertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLocationInsertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLocationInsertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLocationInsertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLocationInsertRequestValidationError) ErrorName() string {
	return "AdminLocationInsertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLocationInsertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLocationInsertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLocationInsertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLocationInsertRequestValidationError{}

// Validate checks the field values on AdminLocationInsertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminLocationInsertReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLocationInsertReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminLocationInsertReplyMultiError, or nil if none found.
func (m *AdminLocationInsertReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLocationInsertReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminLocationInsertReplyMultiError(errors)
	}

	return nil
}

// AdminLocationInsertReplyMultiError is an error wrapping multiple validation
// errors returned by AdminLocationInsertReply.ValidateAll() if the designated
// constraints aren't met.
type AdminLocationInsertReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLocationInsertReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLocationInsertReplyMultiError) AllErrors() []error { return m }

// AdminLocationInsertReplyValidationError is the validation error returned by
// AdminLocationInsertReply.Validate if the designated constraints aren't met.
type AdminLocationInsertReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLocationInsertReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLocationInsertReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLocationInsertReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLocationInsertReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLocationInsertReplyValidationError) ErrorName() string {
	return "AdminLocationInsertReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLocationInsertReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLocationInsertReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLocationInsertReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLocationInsertReplyValidationError{}

// Validate checks the field values on AdminBalanceUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBalanceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBalanceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminBalanceUpdateRequestMultiError, or nil if none found.
func (m *AdminBalanceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBalanceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminBalanceUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminBalanceUpdateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminBalanceUpdateRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminBalanceUpdateRequestMultiError(errors)
	}

	return nil
}

// AdminBalanceUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by AdminBalanceUpdateRequest.ValidateAll() if the
// designated constraints aren't met.
type AdminBalanceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBalanceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBalanceUpdateRequestMultiError) AllErrors() []error { return m }

// AdminBalanceUpdateRequestValidationError is the validation error returned by
// AdminBalanceUpdateRequest.Validate if the designated constraints aren't met.
type AdminBalanceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBalanceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBalanceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBalanceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBalanceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBalanceUpdateRequestValidationError) ErrorName() string {
	return "AdminBalanceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBalanceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBalanceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBalanceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBalanceUpdateRequestValidationError{}

// Validate checks the field values on AdminBalanceUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminBalanceUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBalanceUpdateReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminBalanceUpdateReplyMultiError, or nil if none found.
func (m *AdminBalanceUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBalanceUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminBalanceUpdateReplyMultiError(errors)
	}

	return nil
}

// AdminBalanceUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by AdminBalanceUpdateReply.ValidateAll() if the designated
// constraints aren't met.
type AdminBalanceUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBalanceUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBalanceUpdateReplyMultiError) AllErrors() []error { return m }

// AdminBalanceUpdateReplyValidationError is the validation error returned by
// AdminBalanceUpdateReply.Validate if the designated constraints aren't met.
type AdminBalanceUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBalanceUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBalanceUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBalanceUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBalanceUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBalanceUpdateReplyValidationError) ErrorName() string {
	return "AdminBalanceUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBalanceUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBalanceUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBalanceUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBalanceUpdateReplyValidationError{}

// Validate checks the field values on AuthAdminCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthAdminCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthAdminCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthAdminCreateRequestMultiError, or nil if none found.
func (m *AuthAdminCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthAdminCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthAdminCreateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthAdminCreateRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthAdminCreateRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthAdminCreateRequestMultiError(errors)
	}

	return nil
}

// AuthAdminCreateRequestMultiError is an error wrapping multiple validation
// errors returned by AuthAdminCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthAdminCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthAdminCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthAdminCreateRequestMultiError) AllErrors() []error { return m }

// AuthAdminCreateRequestValidationError is the validation error returned by
// AuthAdminCreateRequest.Validate if the designated constraints aren't met.
type AuthAdminCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthAdminCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthAdminCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthAdminCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthAdminCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthAdminCreateRequestValidationError) ErrorName() string {
	return "AuthAdminCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthAdminCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthAdminCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthAdminCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthAdminCreateRequestValidationError{}

// Validate checks the field values on AuthAdminCreateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthAdminCreateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthAdminCreateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthAdminCreateReplyMultiError, or nil if none found.
func (m *AuthAdminCreateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthAdminCreateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthAdminCreateReplyMultiError(errors)
	}

	return nil
}

// AuthAdminCreateReplyMultiError is an error wrapping multiple validation
// errors returned by AuthAdminCreateReply.ValidateAll() if the designated
// constraints aren't met.
type AuthAdminCreateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthAdminCreateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthAdminCreateReplyMultiError) AllErrors() []error { return m }

// AuthAdminCreateReplyValidationError is the validation error returned by
// AuthAdminCreateReply.Validate if the designated constraints aren't met.
type AuthAdminCreateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthAdminCreateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthAdminCreateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthAdminCreateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthAdminCreateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthAdminCreateReplyValidationError) ErrorName() string {
	return "AuthAdminCreateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AuthAdminCreateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthAdminCreateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthAdminCreateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthAdminCreateReplyValidationError{}

// Validate checks the field values on AuthAdminDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthAdminDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthAdminDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthAdminDeleteRequestMultiError, or nil if none found.
func (m *AuthAdminDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthAdminDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthAdminDeleteRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthAdminDeleteRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthAdminDeleteRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthAdminDeleteRequestMultiError(errors)
	}

	return nil
}

// AuthAdminDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by AuthAdminDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthAdminDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthAdminDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthAdminDeleteRequestMultiError) AllErrors() []error { return m }

// AuthAdminDeleteRequestValidationError is the validation error returned by
// AuthAdminDeleteRequest.Validate if the designated constraints aren't met.
type AuthAdminDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthAdminDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthAdminDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthAdminDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthAdminDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthAdminDeleteRequestValidationError) ErrorName() string {
	return "AuthAdminDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthAdminDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthAdminDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthAdminDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthAdminDeleteRequestValidationError{}

// Validate checks the field values on AuthAdminDeleteReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthAdminDeleteReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthAdminDeleteReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthAdminDeleteReplyMultiError, or nil if none found.
func (m *AuthAdminDeleteReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthAdminDeleteReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthAdminDeleteReplyMultiError(errors)
	}

	return nil
}

// AuthAdminDeleteReplyMultiError is an error wrapping multiple validation
// errors returned by AuthAdminDeleteReply.ValidateAll() if the designated
// constraints aren't met.
type AuthAdminDeleteReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthAdminDeleteReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthAdminDeleteReplyMultiError) AllErrors() []error { return m }

// AuthAdminDeleteReplyValidationError is the validation error returned by
// AuthAdminDeleteReply.Validate if the designated constraints aren't met.
type AuthAdminDeleteReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthAdminDeleteReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthAdminDeleteReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthAdminDeleteReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthAdminDeleteReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthAdminDeleteReplyValidationError) ErrorName() string {
	return "AuthAdminDeleteReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AuthAdminDeleteReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthAdminDeleteReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthAdminDeleteReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthAdminDeleteReplyValidationError{}

// Validate checks the field values on CheckAndInsertRecommendAreaRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CheckAndInsertRecommendAreaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAndInsertRecommendAreaRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CheckAndInsertRecommendAreaRequestMultiError, or nil if none found.
func (m *CheckAndInsertRecommendAreaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAndInsertRecommendAreaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckAndInsertRecommendAreaRequestMultiError(errors)
	}

	return nil
}

// CheckAndInsertRecommendAreaRequestMultiError is an error wrapping multiple
// validation errors returned by
// CheckAndInsertRecommendAreaRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckAndInsertRecommendAreaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAndInsertRecommendAreaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAndInsertRecommendAreaRequestMultiError) AllErrors() []error { return m }

// CheckAndInsertRecommendAreaRequestValidationError is the validation error
// returned by CheckAndInsertRecommendAreaRequest.Validate if the designated
// constraints aren't met.
type CheckAndInsertRecommendAreaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAndInsertRecommendAreaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAndInsertRecommendAreaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAndInsertRecommendAreaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAndInsertRecommendAreaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAndInsertRecommendAreaRequestValidationError) ErrorName() string {
	return "CheckAndInsertRecommendAreaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAndInsertRecommendAreaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAndInsertRecommendAreaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAndInsertRecommendAreaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAndInsertRecommendAreaRequestValidationError{}

// Validate checks the field values on CheckAndInsertRecommendAreaReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CheckAndInsertRecommendAreaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAndInsertRecommendAreaReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckAndInsertRecommendAreaReplyMultiError, or nil if none found.
func (m *CheckAndInsertRecommendAreaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAndInsertRecommendAreaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckAndInsertRecommendAreaReplyMultiError(errors)
	}

	return nil
}

// CheckAndInsertRecommendAreaReplyMultiError is an error wrapping multiple
// validation errors returned by
// CheckAndInsertRecommendAreaReply.ValidateAll() if the designated
// constraints aren't met.
type CheckAndInsertRecommendAreaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAndInsertRecommendAreaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAndInsertRecommendAreaReplyMultiError) AllErrors() []error { return m }

// CheckAndInsertRecommendAreaReplyValidationError is the validation error
// returned by CheckAndInsertRecommendAreaReply.Validate if the designated
// constraints aren't met.
type CheckAndInsertRecommendAreaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAndInsertRecommendAreaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAndInsertRecommendAreaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAndInsertRecommendAreaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAndInsertRecommendAreaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAndInsertRecommendAreaReplyValidationError) ErrorName() string {
	return "CheckAndInsertRecommendAreaReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAndInsertRecommendAreaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAndInsertRecommendAreaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAndInsertRecommendAreaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAndInsertRecommendAreaReplyValidationError{}

// Validate checks the field values on AdminDailyRecommendRewardRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminDailyRecommendRewardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminDailyRecommendRewardRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminDailyRecommendRewardRequestMultiError, or nil if none found.
func (m *AdminDailyRecommendRewardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminDailyRecommendRewardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Day

	if len(errors) > 0 {
		return AdminDailyRecommendRewardRequestMultiError(errors)
	}

	return nil
}

// AdminDailyRecommendRewardRequestMultiError is an error wrapping multiple
// validation errors returned by
// AdminDailyRecommendRewardRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminDailyRecommendRewardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminDailyRecommendRewardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminDailyRecommendRewardRequestMultiError) AllErrors() []error { return m }

// AdminDailyRecommendRewardRequestValidationError is the validation error
// returned by AdminDailyRecommendRewardRequest.Validate if the designated
// constraints aren't met.
type AdminDailyRecommendRewardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDailyRecommendRewardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDailyRecommendRewardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDailyRecommendRewardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDailyRecommendRewardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDailyRecommendRewardRequestValidationError) ErrorName() string {
	return "AdminDailyRecommendRewardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDailyRecommendRewardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDailyRecommendRewardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDailyRecommendRewardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDailyRecommendRewardRequestValidationError{}

// Validate checks the field values on AdminDailyRecommendRewardReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminDailyRecommendRewardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminDailyRecommendRewardReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminDailyRecommendRewardReplyMultiError, or nil if none found.
func (m *AdminDailyRecommendRewardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminDailyRecommendRewardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminDailyRecommendRewardReplyMultiError(errors)
	}

	return nil
}

// AdminDailyRecommendRewardReplyMultiError is an error wrapping multiple
// validation errors returned by AdminDailyRecommendRewardReply.ValidateAll()
// if the designated constraints aren't met.
type AdminDailyRecommendRewardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminDailyRecommendRewardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminDailyRecommendRewardReplyMultiError) AllErrors() []error { return m }

// AdminDailyRecommendRewardReplyValidationError is the validation error
// returned by AdminDailyRecommendRewardReply.Validate if the designated
// constraints aren't met.
type AdminDailyRecommendRewardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDailyRecommendRewardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDailyRecommendRewardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDailyRecommendRewardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDailyRecommendRewardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDailyRecommendRewardReplyValidationError) ErrorName() string {
	return "AdminDailyRecommendRewardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDailyRecommendRewardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDailyRecommendRewardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDailyRecommendRewardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDailyRecommendRewardReplyValidationError{}

// Validate checks the field values on AdminDailyBalanceRewardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminDailyBalanceRewardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminDailyBalanceRewardRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminDailyBalanceRewardRequestMultiError, or nil if none found.
func (m *AdminDailyBalanceRewardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminDailyBalanceRewardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	if len(errors) > 0 {
		return AdminDailyBalanceRewardRequestMultiError(errors)
	}

	return nil
}

// AdminDailyBalanceRewardRequestMultiError is an error wrapping multiple
// validation errors returned by AdminDailyBalanceRewardRequest.ValidateAll()
// if the designated constraints aren't met.
type AdminDailyBalanceRewardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminDailyBalanceRewardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminDailyBalanceRewardRequestMultiError) AllErrors() []error { return m }

// AdminDailyBalanceRewardRequestValidationError is the validation error
// returned by AdminDailyBalanceRewardRequest.Validate if the designated
// constraints aren't met.
type AdminDailyBalanceRewardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDailyBalanceRewardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDailyBalanceRewardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDailyBalanceRewardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDailyBalanceRewardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDailyBalanceRewardRequestValidationError) ErrorName() string {
	return "AdminDailyBalanceRewardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDailyBalanceRewardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDailyBalanceRewardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDailyBalanceRewardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDailyBalanceRewardRequestValidationError{}

// Validate checks the field values on AdminDailyBalanceRewardReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminDailyBalanceRewardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminDailyBalanceRewardReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminDailyBalanceRewardReplyMultiError, or nil if none found.
func (m *AdminDailyBalanceRewardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminDailyBalanceRewardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminDailyBalanceRewardReplyMultiError(errors)
	}

	return nil
}

// AdminDailyBalanceRewardReplyMultiError is an error wrapping multiple
// validation errors returned by AdminDailyBalanceRewardReply.ValidateAll() if
// the designated constraints aren't met.
type AdminDailyBalanceRewardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminDailyBalanceRewardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminDailyBalanceRewardReplyMultiError) AllErrors() []error { return m }

// AdminDailyBalanceRewardReplyValidationError is the validation error returned
// by AdminDailyBalanceRewardReply.Validate if the designated constraints
// aren't met.
type AdminDailyBalanceRewardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDailyBalanceRewardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDailyBalanceRewardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDailyBalanceRewardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDailyBalanceRewardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDailyBalanceRewardReplyValidationError) ErrorName() string {
	return "AdminDailyBalanceRewardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDailyBalanceRewardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDailyBalanceRewardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDailyBalanceRewardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDailyBalanceRewardReplyValidationError{}

// Validate checks the field values on AdminLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminLoginRequestMultiError, or nil if none found.
func (m *AdminLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminLoginRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminLoginRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminLoginRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminLoginRequestMultiError(errors)
	}

	return nil
}

// AdminLoginRequestMultiError is an error wrapping multiple validation errors
// returned by AdminLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type AdminLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLoginRequestMultiError) AllErrors() []error { return m }

// AdminLoginRequestValidationError is the validation error returned by
// AdminLoginRequest.Validate if the designated constraints aren't met.
type AdminLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLoginRequestValidationError) ErrorName() string {
	return "AdminLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLoginRequestValidationError{}

// Validate checks the field values on AdminLoginReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminLoginReplyMultiError, or nil if none found.
func (m *AdminLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return AdminLoginReplyMultiError(errors)
	}

	return nil
}

// AdminLoginReplyMultiError is an error wrapping multiple validation errors
// returned by AdminLoginReply.ValidateAll() if the designated constraints
// aren't met.
type AdminLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLoginReplyMultiError) AllErrors() []error { return m }

// AdminLoginReplyValidationError is the validation error returned by
// AdminLoginReply.Validate if the designated constraints aren't met.
type AdminLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLoginReplyValidationError) ErrorName() string { return "AdminLoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e AdminLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLoginReplyValidationError{}

// Validate checks the field values on AdminChangePasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminChangePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminChangePasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminChangePasswordRequestMultiError, or nil if none found.
func (m *AdminChangePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminChangePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminChangePasswordRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminChangePasswordRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminChangePasswordRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminChangePasswordRequestMultiError(errors)
	}

	return nil
}

// AdminChangePasswordRequestMultiError is an error wrapping multiple
// validation errors returned by AdminChangePasswordRequest.ValidateAll() if
// the designated constraints aren't met.
type AdminChangePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminChangePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminChangePasswordRequestMultiError) AllErrors() []error { return m }

// AdminChangePasswordRequestValidationError is the validation error returned
// by AdminChangePasswordRequest.Validate if the designated constraints aren't met.
type AdminChangePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminChangePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminChangePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminChangePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminChangePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminChangePasswordRequestValidationError) ErrorName() string {
	return "AdminChangePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminChangePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminChangePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminChangePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminChangePasswordRequestValidationError{}

// Validate checks the field values on AdminChangePasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminChangePasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminChangePasswordReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminChangePasswordReplyMultiError, or nil if none found.
func (m *AdminChangePasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminChangePasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminChangePasswordReplyMultiError(errors)
	}

	return nil
}

// AdminChangePasswordReplyMultiError is an error wrapping multiple validation
// errors returned by AdminChangePasswordReply.ValidateAll() if the designated
// constraints aren't met.
type AdminChangePasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminChangePasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminChangePasswordReplyMultiError) AllErrors() []error { return m }

// AdminChangePasswordReplyValidationError is the validation error returned by
// AdminChangePasswordReply.Validate if the designated constraints aren't met.
type AdminChangePasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminChangePasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminChangePasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminChangePasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminChangePasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminChangePasswordReplyValidationError) ErrorName() string {
	return "AdminChangePasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminChangePasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminChangePasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminChangePasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminChangePasswordReplyValidationError{}

// Validate checks the field values on AdminCreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminCreateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCreateAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminCreateAccountRequestMultiError, or nil if none found.
func (m *AdminCreateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCreateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminCreateAccountRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminCreateAccountRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminCreateAccountRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminCreateAccountRequestMultiError(errors)
	}

	return nil
}

// AdminCreateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by AdminCreateAccountRequest.ValidateAll() if the
// designated constraints aren't met.
type AdminCreateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCreateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCreateAccountRequestMultiError) AllErrors() []error { return m }

// AdminCreateAccountRequestValidationError is the validation error returned by
// AdminCreateAccountRequest.Validate if the designated constraints aren't met.
type AdminCreateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCreateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCreateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCreateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCreateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCreateAccountRequestValidationError) ErrorName() string {
	return "AdminCreateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCreateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCreateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCreateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCreateAccountRequestValidationError{}

// Validate checks the field values on AdminCreateAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminCreateAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCreateAccountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminCreateAccountReplyMultiError, or nil if none found.
func (m *AdminCreateAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCreateAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminCreateAccountReplyMultiError(errors)
	}

	return nil
}

// AdminCreateAccountReplyMultiError is an error wrapping multiple validation
// errors returned by AdminCreateAccountReply.ValidateAll() if the designated
// constraints aren't met.
type AdminCreateAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCreateAccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCreateAccountReplyMultiError) AllErrors() []error { return m }

// AdminCreateAccountReplyValidationError is the validation error returned by
// AdminCreateAccountReply.Validate if the designated constraints aren't met.
type AdminCreateAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCreateAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCreateAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCreateAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCreateAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCreateAccountReplyValidationError) ErrorName() string {
	return "AdminCreateAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCreateAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCreateAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCreateAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCreateAccountReplyValidationError{}

// Validate checks the field values on AdminDailyLocationRewardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminDailyLocationRewardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminDailyLocationRewardRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminDailyLocationRewardRequestMultiError, or nil if none found.
func (m *AdminDailyLocationRewardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminDailyLocationRewardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	if len(errors) > 0 {
		return AdminDailyLocationRewardRequestMultiError(errors)
	}

	return nil
}

// AdminDailyLocationRewardRequestMultiError is an error wrapping multiple
// validation errors returned by AdminDailyLocationRewardRequest.ValidateAll()
// if the designated constraints aren't met.
type AdminDailyLocationRewardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminDailyLocationRewardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminDailyLocationRewardRequestMultiError) AllErrors() []error { return m }

// AdminDailyLocationRewardRequestValidationError is the validation error
// returned by AdminDailyLocationRewardRequest.Validate if the designated
// constraints aren't met.
type AdminDailyLocationRewardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDailyLocationRewardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDailyLocationRewardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDailyLocationRewardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDailyLocationRewardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDailyLocationRewardRequestValidationError) ErrorName() string {
	return "AdminDailyLocationRewardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDailyLocationRewardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDailyLocationRewardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDailyLocationRewardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDailyLocationRewardRequestValidationError{}

// Validate checks the field values on AdminDailyLocationRewardReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminDailyLocationRewardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminDailyLocationRewardReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminDailyLocationRewardReplyMultiError, or nil if none found.
func (m *AdminDailyLocationRewardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminDailyLocationRewardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminDailyLocationRewardReplyMultiError(errors)
	}

	return nil
}

// AdminDailyLocationRewardReplyMultiError is an error wrapping multiple
// validation errors returned by AdminDailyLocationRewardReply.ValidateAll()
// if the designated constraints aren't met.
type AdminDailyLocationRewardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminDailyLocationRewardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminDailyLocationRewardReplyMultiError) AllErrors() []error { return m }

// AdminDailyLocationRewardReplyValidationError is the validation error
// returned by AdminDailyLocationRewardReply.Validate if the designated
// constraints aren't met.
type AdminDailyLocationRewardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDailyLocationRewardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDailyLocationRewardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDailyLocationRewardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDailyLocationRewardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDailyLocationRewardReplyValidationError) ErrorName() string {
	return "AdminDailyLocationRewardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDailyLocationRewardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDailyLocationRewardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDailyLocationRewardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDailyLocationRewardReplyValidationError{}

// Validate checks the field values on AdminDailyLocationRewardNewRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminDailyLocationRewardNewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminDailyLocationRewardNewRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminDailyLocationRewardNewRequestMultiError, or nil if none found.
func (m *AdminDailyLocationRewardNewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminDailyLocationRewardNewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminDailyLocationRewardNewRequestMultiError(errors)
	}

	return nil
}

// AdminDailyLocationRewardNewRequestMultiError is an error wrapping multiple
// validation errors returned by
// AdminDailyLocationRewardNewRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminDailyLocationRewardNewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminDailyLocationRewardNewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminDailyLocationRewardNewRequestMultiError) AllErrors() []error { return m }

// AdminDailyLocationRewardNewRequestValidationError is the validation error
// returned by AdminDailyLocationRewardNewRequest.Validate if the designated
// constraints aren't met.
type AdminDailyLocationRewardNewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDailyLocationRewardNewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDailyLocationRewardNewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDailyLocationRewardNewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDailyLocationRewardNewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDailyLocationRewardNewRequestValidationError) ErrorName() string {
	return "AdminDailyLocationRewardNewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDailyLocationRewardNewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDailyLocationRewardNewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDailyLocationRewardNewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDailyLocationRewardNewRequestValidationError{}

// Validate checks the field values on AdminDailyLocationRewardNewReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminDailyLocationRewardNewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminDailyLocationRewardNewReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminDailyLocationRewardNewReplyMultiError, or nil if none found.
func (m *AdminDailyLocationRewardNewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminDailyLocationRewardNewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminDailyLocationRewardNewReplyMultiError(errors)
	}

	return nil
}

// AdminDailyLocationRewardNewReplyMultiError is an error wrapping multiple
// validation errors returned by
// AdminDailyLocationRewardNewReply.ValidateAll() if the designated
// constraints aren't met.
type AdminDailyLocationRewardNewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminDailyLocationRewardNewReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminDailyLocationRewardNewReplyMultiError) AllErrors() []error { return m }

// AdminDailyLocationRewardNewReplyValidationError is the validation error
// returned by AdminDailyLocationRewardNewReply.Validate if the designated
// constraints aren't met.
type AdminDailyLocationRewardNewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDailyLocationRewardNewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDailyLocationRewardNewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDailyLocationRewardNewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDailyLocationRewardNewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDailyLocationRewardNewReplyValidationError) ErrorName() string {
	return "AdminDailyLocationRewardNewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDailyLocationRewardNewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDailyLocationRewardNewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDailyLocationRewardNewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDailyLocationRewardNewReplyValidationError{}

// Validate checks the field values on EthAuthorizeRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EthAuthorizeRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EthAuthorizeRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EthAuthorizeRequest_SendBodyMultiError, or nil if none found.
func (m *EthAuthorizeRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *EthAuthorizeRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Code

	if len(errors) > 0 {
		return EthAuthorizeRequest_SendBodyMultiError(errors)
	}

	return nil
}

// EthAuthorizeRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by EthAuthorizeRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type EthAuthorizeRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EthAuthorizeRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EthAuthorizeRequest_SendBodyMultiError) AllErrors() []error { return m }

// EthAuthorizeRequest_SendBodyValidationError is the validation error returned
// by EthAuthorizeRequest_SendBody.Validate if the designated constraints
// aren't met.
type EthAuthorizeRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EthAuthorizeRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EthAuthorizeRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EthAuthorizeRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EthAuthorizeRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EthAuthorizeRequest_SendBodyValidationError) ErrorName() string {
	return "EthAuthorizeRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e EthAuthorizeRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEthAuthorizeRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EthAuthorizeRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EthAuthorizeRequest_SendBodyValidationError{}

// Validate checks the field values on RewardListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RewardListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RewardListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RewardListReply_ListMultiError, or nil if none found.
func (m *RewardListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *RewardListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Amount

	// no validation rules for LocationStatus

	// no validation rules for Type

	if len(errors) > 0 {
		return RewardListReply_ListMultiError(errors)
	}

	return nil
}

// RewardListReply_ListMultiError is an error wrapping multiple validation
// errors returned by RewardListReply_List.ValidateAll() if the designated
// constraints aren't met.
type RewardListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RewardListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RewardListReply_ListMultiError) AllErrors() []error { return m }

// RewardListReply_ListValidationError is the validation error returned by
// RewardListReply_List.Validate if the designated constraints aren't met.
type RewardListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RewardListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RewardListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RewardListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RewardListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RewardListReply_ListValidationError) ErrorName() string {
	return "RewardListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e RewardListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRewardListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RewardListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RewardListReply_ListValidationError{}

// Validate checks the field values on RecommendRewardListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendRewardListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendRewardListReply_List with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RecommendRewardListReply_ListMultiError, or nil if none found.
func (m *RecommendRewardListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendRewardListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Amount

	// no validation rules for Type

	// no validation rules for Reason

	if len(errors) > 0 {
		return RecommendRewardListReply_ListMultiError(errors)
	}

	return nil
}

// RecommendRewardListReply_ListMultiError is an error wrapping multiple
// validation errors returned by RecommendRewardListReply_List.ValidateAll()
// if the designated constraints aren't met.
type RecommendRewardListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendRewardListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendRewardListReply_ListMultiError) AllErrors() []error { return m }

// RecommendRewardListReply_ListValidationError is the validation error
// returned by RecommendRewardListReply_List.Validate if the designated
// constraints aren't met.
type RecommendRewardListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendRewardListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendRewardListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendRewardListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendRewardListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendRewardListReply_ListValidationError) ErrorName() string {
	return "RecommendRewardListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendRewardListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendRewardListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendRewardListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendRewardListReply_ListValidationError{}

// Validate checks the field values on FeeRewardListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeeRewardListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeeRewardListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeeRewardListReply_ListMultiError, or nil if none found.
func (m *FeeRewardListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *FeeRewardListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Amount

	if len(errors) > 0 {
		return FeeRewardListReply_ListMultiError(errors)
	}

	return nil
}

// FeeRewardListReply_ListMultiError is an error wrapping multiple validation
// errors returned by FeeRewardListReply_List.ValidateAll() if the designated
// constraints aren't met.
type FeeRewardListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeeRewardListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeeRewardListReply_ListMultiError) AllErrors() []error { return m }

// FeeRewardListReply_ListValidationError is the validation error returned by
// FeeRewardListReply_List.Validate if the designated constraints aren't met.
type FeeRewardListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeeRewardListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeeRewardListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeeRewardListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeeRewardListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeeRewardListReply_ListValidationError) ErrorName() string {
	return "FeeRewardListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e FeeRewardListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeeRewardListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeeRewardListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeeRewardListReply_ListValidationError{}

// Validate checks the field values on WithdrawListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawListReply_ListMultiError, or nil if none found.
func (m *WithdrawListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Amount

	// no validation rules for Type

	// no validation rules for Status

	if len(errors) > 0 {
		return WithdrawListReply_ListMultiError(errors)
	}

	return nil
}

// WithdrawListReply_ListMultiError is an error wrapping multiple validation
// errors returned by WithdrawListReply_List.ValidateAll() if the designated
// constraints aren't met.
type WithdrawListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawListReply_ListMultiError) AllErrors() []error { return m }

// WithdrawListReply_ListValidationError is the validation error returned by
// WithdrawListReply_List.Validate if the designated constraints aren't met.
type WithdrawListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawListReply_ListValidationError) ErrorName() string {
	return "WithdrawListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawListReply_ListValidationError{}

// Validate checks the field values on RecommendListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecommendListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecommendListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecommendListReply_ListMultiError, or nil if none found.
func (m *RecommendListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *RecommendListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	// no validation rules for Status

	if len(errors) > 0 {
		return RecommendListReply_ListMultiError(errors)
	}

	return nil
}

// RecommendListReply_ListMultiError is an error wrapping multiple validation
// errors returned by RecommendListReply_List.ValidateAll() if the designated
// constraints aren't met.
type RecommendListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecommendListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecommendListReply_ListMultiError) AllErrors() []error { return m }

// RecommendListReply_ListValidationError is the validation error returned by
// RecommendListReply_List.Validate if the designated constraints aren't met.
type RecommendListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecommendListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecommendListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecommendListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecommendListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecommendListReply_ListValidationError) ErrorName() string {
	return "RecommendListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e RecommendListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecommendListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecommendListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecommendListReply_ListValidationError{}

// Validate checks the field values on WithdrawRequest_SendBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawRequest_SendBodyMultiError, or nil if none found.
func (m *WithdrawRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Amount

	if len(errors) > 0 {
		return WithdrawRequest_SendBodyMultiError(errors)
	}

	return nil
}

// WithdrawRequest_SendBodyMultiError is an error wrapping multiple validation
// errors returned by WithdrawRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type WithdrawRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawRequest_SendBodyMultiError) AllErrors() []error { return m }

// WithdrawRequest_SendBodyValidationError is the validation error returned by
// WithdrawRequest_SendBody.Validate if the designated constraints aren't met.
type WithdrawRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawRequest_SendBodyValidationError) ErrorName() string {
	return "WithdrawRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawRequest_SendBodyValidationError{}

// Validate checks the field values on AdminRewardListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminRewardListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminRewardListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminRewardListReply_ListMultiError, or nil if none found.
func (m *AdminRewardListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminRewardListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Amount

	// no validation rules for AmountB

	// no validation rules for Type

	// no validation rules for Address

	// no validation rules for Reason

	if len(errors) > 0 {
		return AdminRewardListReply_ListMultiError(errors)
	}

	return nil
}

// AdminRewardListReply_ListMultiError is an error wrapping multiple validation
// errors returned by AdminRewardListReply_List.ValidateAll() if the
// designated constraints aren't met.
type AdminRewardListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminRewardListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminRewardListReply_ListMultiError) AllErrors() []error { return m }

// AdminRewardListReply_ListValidationError is the validation error returned by
// AdminRewardListReply_List.Validate if the designated constraints aren't met.
type AdminRewardListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminRewardListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminRewardListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminRewardListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminRewardListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminRewardListReply_ListValidationError) ErrorName() string {
	return "AdminRewardListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminRewardListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminRewardListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminRewardListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminRewardListReply_ListValidationError{}

// Validate checks the field values on AdminTradeListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminTradeListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminTradeListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminTradeListReply_ListMultiError, or nil if none found.
func (m *AdminTradeListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminTradeListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for AmountCsd

	// no validation rules for AmountHbs

	// no validation rules for Address

	if len(errors) > 0 {
		return AdminTradeListReply_ListMultiError(errors)
	}

	return nil
}

// AdminTradeListReply_ListMultiError is an error wrapping multiple validation
// errors returned by AdminTradeListReply_List.ValidateAll() if the designated
// constraints aren't met.
type AdminTradeListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminTradeListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminTradeListReply_ListMultiError) AllErrors() []error { return m }

// AdminTradeListReply_ListValidationError is the validation error returned by
// AdminTradeListReply_List.Validate if the designated constraints aren't met.
type AdminTradeListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminTradeListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminTradeListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminTradeListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminTradeListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminTradeListReply_ListValidationError) ErrorName() string {
	return "AdminTradeListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminTradeListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminTradeListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminTradeListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminTradeListReply_ListValidationError{}

// Validate checks the field values on AdminUserListReply_UserList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUserListReply_UserList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserListReply_UserList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserListReply_UserListMultiError, or nil if none found.
func (m *AdminUserListReply_UserList) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserListReply_UserList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for CreatedAt

	// no validation rules for Address

	// no validation rules for BalanceUsdt

	// no validation rules for BalanceDhb

	// no validation rules for BalanceUsdtLock

	// no validation rules for BalanceDhbLock

	// no validation rules for Vip

	// no validation rules for HistoryRecommend

	// no validation rules for TeamCsdBalance

	if len(errors) > 0 {
		return AdminUserListReply_UserListMultiError(errors)
	}

	return nil
}

// AdminUserListReply_UserListMultiError is an error wrapping multiple
// validation errors returned by AdminUserListReply_UserList.ValidateAll() if
// the designated constraints aren't met.
type AdminUserListReply_UserListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserListReply_UserListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserListReply_UserListMultiError) AllErrors() []error { return m }

// AdminUserListReply_UserListValidationError is the validation error returned
// by AdminUserListReply_UserList.Validate if the designated constraints
// aren't met.
type AdminUserListReply_UserListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserListReply_UserListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserListReply_UserListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserListReply_UserListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserListReply_UserListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserListReply_UserListValidationError) ErrorName() string {
	return "AdminUserListReply_UserListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUserListReply_UserListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserListReply_UserList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserListReply_UserListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserListReply_UserListValidationError{}

// Validate checks the field values on RecordListReply_LocationList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordListReply_LocationList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordListReply_LocationList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordListReply_LocationListMultiError, or nil if none found.
func (m *RecordListReply_LocationList) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordListReply_LocationList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Address

	// no validation rules for Amount

	// no validation rules for CoinType

	if len(errors) > 0 {
		return RecordListReply_LocationListMultiError(errors)
	}

	return nil
}

// RecordListReply_LocationListMultiError is an error wrapping multiple
// validation errors returned by RecordListReply_LocationList.ValidateAll() if
// the designated constraints aren't met.
type RecordListReply_LocationListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordListReply_LocationListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordListReply_LocationListMultiError) AllErrors() []error { return m }

// RecordListReply_LocationListValidationError is the validation error returned
// by RecordListReply_LocationList.Validate if the designated constraints
// aren't met.
type RecordListReply_LocationListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordListReply_LocationListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordListReply_LocationListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordListReply_LocationListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordListReply_LocationListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordListReply_LocationListValidationError) ErrorName() string {
	return "RecordListReply_LocationListValidationError"
}

// Error satisfies the builtin error interface
func (e RecordListReply_LocationListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordListReply_LocationList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordListReply_LocationListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordListReply_LocationListValidationError{}

// Validate checks the field values on AdminLocationListReply_LocationList with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminLocationListReply_LocationList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLocationListReply_LocationList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminLocationListReply_LocationListMultiError, or nil if none found.
func (m *AdminLocationListReply_LocationList) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLocationListReply_LocationList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Address

	// no validation rules for Status

	// no validation rules for CurrentLevel

	// no validation rules for Current

	// no validation rules for CurrentMax

	if len(errors) > 0 {
		return AdminLocationListReply_LocationListMultiError(errors)
	}

	return nil
}

// AdminLocationListReply_LocationListMultiError is an error wrapping multiple
// validation errors returned by
// AdminLocationListReply_LocationList.ValidateAll() if the designated
// constraints aren't met.
type AdminLocationListReply_LocationListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLocationListReply_LocationListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLocationListReply_LocationListMultiError) AllErrors() []error { return m }

// AdminLocationListReply_LocationListValidationError is the validation error
// returned by AdminLocationListReply_LocationList.Validate if the designated
// constraints aren't met.
type AdminLocationListReply_LocationListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLocationListReply_LocationListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLocationListReply_LocationListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLocationListReply_LocationListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLocationListReply_LocationListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLocationListReply_LocationListValidationError) ErrorName() string {
	return "AdminLocationListReply_LocationListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLocationListReply_LocationListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLocationListReply_LocationList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLocationListReply_LocationListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLocationListReply_LocationListValidationError{}

// Validate checks the field values on AdminLocationAllListReply_LocationList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminLocationAllListReply_LocationList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AdminLocationAllListReply_LocationList with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AdminLocationAllListReply_LocationListMultiError, or nil if none found.
func (m *AdminLocationAllListReply_LocationList) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLocationAllListReply_LocationList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Address

	// no validation rules for Status

	// no validation rules for CurrentLevel

	// no validation rules for Current

	// no validation rules for CurrentMax

	if len(errors) > 0 {
		return AdminLocationAllListReply_LocationListMultiError(errors)
	}

	return nil
}

// AdminLocationAllListReply_LocationListMultiError is an error wrapping
// multiple validation errors returned by
// AdminLocationAllListReply_LocationList.ValidateAll() if the designated
// constraints aren't met.
type AdminLocationAllListReply_LocationListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLocationAllListReply_LocationListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLocationAllListReply_LocationListMultiError) AllErrors() []error { return m }

// AdminLocationAllListReply_LocationListValidationError is the validation
// error returned by AdminLocationAllListReply_LocationList.Validate if the
// designated constraints aren't met.
type AdminLocationAllListReply_LocationListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLocationAllListReply_LocationListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLocationAllListReply_LocationListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLocationAllListReply_LocationListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLocationAllListReply_LocationListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLocationAllListReply_LocationListValidationError) ErrorName() string {
	return "AdminLocationAllListReply_LocationListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLocationAllListReply_LocationListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLocationAllListReply_LocationList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLocationAllListReply_LocationListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLocationAllListReply_LocationListValidationError{}

// Validate checks the field values on AdminWithdrawListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminWithdrawListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawListReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminWithdrawListReply_ListMultiError, or nil if none found.
func (m *AdminWithdrawListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for Amount

	// no validation rules for RelAmount

	// no validation rules for Type

	// no validation rules for Status

	if len(errors) > 0 {
		return AdminWithdrawListReply_ListMultiError(errors)
	}

	return nil
}

// AdminWithdrawListReply_ListMultiError is an error wrapping multiple
// validation errors returned by AdminWithdrawListReply_List.ValidateAll() if
// the designated constraints aren't met.
type AdminWithdrawListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawListReply_ListMultiError) AllErrors() []error { return m }

// AdminWithdrawListReply_ListValidationError is the validation error returned
// by AdminWithdrawListReply_List.Validate if the designated constraints
// aren't met.
type AdminWithdrawListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawListReply_ListValidationError) ErrorName() string {
	return "AdminWithdrawListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawListReply_ListValidationError{}

// Validate checks the field values on AdminWithdrawPassRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminWithdrawPassRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminWithdrawPassRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminWithdrawPassRequest_SendBodyMultiError, or nil if none found.
func (m *AdminWithdrawPassRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminWithdrawPassRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AdminWithdrawPassRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminWithdrawPassRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// AdminWithdrawPassRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type AdminWithdrawPassRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminWithdrawPassRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminWithdrawPassRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminWithdrawPassRequest_SendBodyValidationError is the validation error
// returned by AdminWithdrawPassRequest_SendBody.Validate if the designated
// constraints aren't met.
type AdminWithdrawPassRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminWithdrawPassRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminWithdrawPassRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminWithdrawPassRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminWithdrawPassRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminWithdrawPassRequest_SendBodyValidationError) ErrorName() string {
	return "AdminWithdrawPassRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminWithdrawPassRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminWithdrawPassRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminWithdrawPassRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminWithdrawPassRequest_SendBodyValidationError{}

// Validate checks the field values on AdminUserRecommendReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUserRecommendReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUserRecommendReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUserRecommendReply_ListMultiError, or nil if none found.
func (m *AdminUserRecommendReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUserRecommendReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Address

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for Amount

	// no validation rules for RelAmount

	// no validation rules for RecommendAllAmount

	if len(errors) > 0 {
		return AdminUserRecommendReply_ListMultiError(errors)
	}

	return nil
}

// AdminUserRecommendReply_ListMultiError is an error wrapping multiple
// validation errors returned by AdminUserRecommendReply_List.ValidateAll() if
// the designated constraints aren't met.
type AdminUserRecommendReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUserRecommendReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUserRecommendReply_ListMultiError) AllErrors() []error { return m }

// AdminUserRecommendReply_ListValidationError is the validation error returned
// by AdminUserRecommendReply_List.Validate if the designated constraints
// aren't met.
type AdminUserRecommendReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUserRecommendReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUserRecommendReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUserRecommendReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUserRecommendReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUserRecommendReply_ListValidationError) ErrorName() string {
	return "AdminUserRecommendReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUserRecommendReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUserRecommendReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUserRecommendReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUserRecommendReply_ListValidationError{}

// Validate checks the field values on AdminMonthRecommendReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminMonthRecommendReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminMonthRecommendReply_List with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminMonthRecommendReply_ListMultiError, or nil if none found.
func (m *AdminMonthRecommendReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminMonthRecommendReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for RecommendAddress

	// no validation rules for Id

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return AdminMonthRecommendReply_ListMultiError(errors)
	}

	return nil
}

// AdminMonthRecommendReply_ListMultiError is an error wrapping multiple
// validation errors returned by AdminMonthRecommendReply_List.ValidateAll()
// if the designated constraints aren't met.
type AdminMonthRecommendReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminMonthRecommendReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminMonthRecommendReply_ListMultiError) AllErrors() []error { return m }

// AdminMonthRecommendReply_ListValidationError is the validation error
// returned by AdminMonthRecommendReply_List.Validate if the designated
// constraints aren't met.
type AdminMonthRecommendReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminMonthRecommendReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminMonthRecommendReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminMonthRecommendReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminMonthRecommendReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminMonthRecommendReply_ListValidationError) ErrorName() string {
	return "AdminMonthRecommendReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminMonthRecommendReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminMonthRecommendReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminMonthRecommendReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminMonthRecommendReply_ListValidationError{}

// Validate checks the field values on AdminConfigReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminConfigReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminConfigReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminConfigReply_ListMultiError, or nil if none found.
func (m *AdminConfigReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminConfigReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Value

	if len(errors) > 0 {
		return AdminConfigReply_ListMultiError(errors)
	}

	return nil
}

// AdminConfigReply_ListMultiError is an error wrapping multiple validation
// errors returned by AdminConfigReply_List.ValidateAll() if the designated
// constraints aren't met.
type AdminConfigReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminConfigReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminConfigReply_ListMultiError) AllErrors() []error { return m }

// AdminConfigReply_ListValidationError is the validation error returned by
// AdminConfigReply_List.Validate if the designated constraints aren't met.
type AdminConfigReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminConfigReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminConfigReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminConfigReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminConfigReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminConfigReply_ListValidationError) ErrorName() string {
	return "AdminConfigReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminConfigReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminConfigReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminConfigReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminConfigReply_ListValidationError{}

// Validate checks the field values on AdminListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminListReply_ListMultiError, or nil if none found.
func (m *AdminListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Account

	if len(errors) > 0 {
		return AdminListReply_ListMultiError(errors)
	}

	return nil
}

// AdminListReply_ListMultiError is an error wrapping multiple validation
// errors returned by AdminListReply_List.ValidateAll() if the designated
// constraints aren't met.
type AdminListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminListReply_ListMultiError) AllErrors() []error { return m }

// AdminListReply_ListValidationError is the validation error returned by
// AdminListReply_List.Validate if the designated constraints aren't met.
type AdminListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminListReply_ListValidationError) ErrorName() string {
	return "AdminListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AdminListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminListReply_ListValidationError{}

// Validate checks the field values on AuthListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthListReply_ListMultiError, or nil if none found.
func (m *AuthListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Path

	if len(errors) > 0 {
		return AuthListReply_ListMultiError(errors)
	}

	return nil
}

// AuthListReply_ListMultiError is an error wrapping multiple validation errors
// returned by AuthListReply_List.ValidateAll() if the designated constraints
// aren't met.
type AuthListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthListReply_ListMultiError) AllErrors() []error { return m }

// AuthListReply_ListValidationError is the validation error returned by
// AuthListReply_List.Validate if the designated constraints aren't met.
type AuthListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthListReply_ListValidationError) ErrorName() string {
	return "AuthListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e AuthListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthListReply_ListValidationError{}

// Validate checks the field values on UserAuthListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserAuthListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAuthListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserAuthListReply_ListMultiError, or nil if none found.
func (m *UserAuthListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAuthListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Path

	if len(errors) > 0 {
		return UserAuthListReply_ListMultiError(errors)
	}

	return nil
}

// UserAuthListReply_ListMultiError is an error wrapping multiple validation
// errors returned by UserAuthListReply_List.ValidateAll() if the designated
// constraints aren't met.
type UserAuthListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAuthListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAuthListReply_ListMultiError) AllErrors() []error { return m }

// UserAuthListReply_ListValidationError is the validation error returned by
// UserAuthListReply_List.Validate if the designated constraints aren't met.
type UserAuthListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAuthListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAuthListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAuthListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAuthListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAuthListReply_ListValidationError) ErrorName() string {
	return "UserAuthListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e UserAuthListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAuthListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAuthListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAuthListReply_ListValidationError{}

// Validate checks the field values on MyAuthListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MyAuthListReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyAuthListReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MyAuthListReply_ListMultiError, or nil if none found.
func (m *MyAuthListReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *MyAuthListReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Path

	if len(errors) > 0 {
		return MyAuthListReply_ListMultiError(errors)
	}

	return nil
}

// MyAuthListReply_ListMultiError is an error wrapping multiple validation
// errors returned by MyAuthListReply_List.ValidateAll() if the designated
// constraints aren't met.
type MyAuthListReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyAuthListReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyAuthListReply_ListMultiError) AllErrors() []error { return m }

// MyAuthListReply_ListValidationError is the validation error returned by
// MyAuthListReply_List.Validate if the designated constraints aren't met.
type MyAuthListReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyAuthListReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyAuthListReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyAuthListReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyAuthListReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyAuthListReply_ListValidationError) ErrorName() string {
	return "MyAuthListReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e MyAuthListReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyAuthListReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyAuthListReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyAuthListReply_ListValidationError{}

// Validate checks the field values on AdminConfigUpdateRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminConfigUpdateRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminConfigUpdateRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminConfigUpdateRequest_SendBodyMultiError, or nil if none found.
func (m *AdminConfigUpdateRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminConfigUpdateRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Value

	if len(errors) > 0 {
		return AdminConfigUpdateRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminConfigUpdateRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// AdminConfigUpdateRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type AdminConfigUpdateRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminConfigUpdateRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminConfigUpdateRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminConfigUpdateRequest_SendBodyValidationError is the validation error
// returned by AdminConfigUpdateRequest_SendBody.Validate if the designated
// constraints aren't met.
type AdminConfigUpdateRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminConfigUpdateRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminConfigUpdateRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminConfigUpdateRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminConfigUpdateRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminConfigUpdateRequest_SendBodyValidationError) ErrorName() string {
	return "AdminConfigUpdateRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminConfigUpdateRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminConfigUpdateRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminConfigUpdateRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminConfigUpdateRequest_SendBodyValidationError{}

// Validate checks the field values on AdminPasswordUpdateRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminPasswordUpdateRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminPasswordUpdateRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminPasswordUpdateRequest_SendBodyMultiError, or nil if none found.
func (m *AdminPasswordUpdateRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminPasswordUpdateRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Password

	if len(errors) > 0 {
		return AdminPasswordUpdateRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminPasswordUpdateRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// AdminPasswordUpdateRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type AdminPasswordUpdateRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminPasswordUpdateRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminPasswordUpdateRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminPasswordUpdateRequest_SendBodyValidationError is the validation error
// returned by AdminPasswordUpdateRequest_SendBody.Validate if the designated
// constraints aren't met.
type AdminPasswordUpdateRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminPasswordUpdateRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminPasswordUpdateRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminPasswordUpdateRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminPasswordUpdateRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminPasswordUpdateRequest_SendBodyValidationError) ErrorName() string {
	return "AdminPasswordUpdateRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminPasswordUpdateRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminPasswordUpdateRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminPasswordUpdateRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminPasswordUpdateRequest_SendBodyValidationError{}

// Validate checks the field values on
// AdminUpdateLocationNewMaxRequest_SendBody with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminUpdateLocationNewMaxRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AdminUpdateLocationNewMaxRequest_SendBody with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AdminUpdateLocationNewMaxRequest_SendBodyMultiError, or nil if none found.
func (m *AdminUpdateLocationNewMaxRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateLocationNewMaxRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Amount

	if len(errors) > 0 {
		return AdminUpdateLocationNewMaxRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminUpdateLocationNewMaxRequest_SendBodyMultiError is an error wrapping
// multiple validation errors returned by
// AdminUpdateLocationNewMaxRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type AdminUpdateLocationNewMaxRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateLocationNewMaxRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateLocationNewMaxRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminUpdateLocationNewMaxRequest_SendBodyValidationError is the validation
// error returned by AdminUpdateLocationNewMaxRequest_SendBody.Validate if the
// designated constraints aren't met.
type AdminUpdateLocationNewMaxRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateLocationNewMaxRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateLocationNewMaxRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateLocationNewMaxRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateLocationNewMaxRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateLocationNewMaxRequest_SendBodyValidationError) ErrorName() string {
	return "AdminUpdateLocationNewMaxRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdateLocationNewMaxRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateLocationNewMaxRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateLocationNewMaxRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateLocationNewMaxRequest_SendBodyValidationError{}

// Validate checks the field values on AdminVipUpdateRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminVipUpdateRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminVipUpdateRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminVipUpdateRequest_SendBodyMultiError, or nil if none found.
func (m *AdminVipUpdateRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminVipUpdateRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Vip

	if len(errors) > 0 {
		return AdminVipUpdateRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminVipUpdateRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by AdminVipUpdateRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type AdminVipUpdateRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminVipUpdateRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminVipUpdateRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminVipUpdateRequest_SendBodyValidationError is the validation error
// returned by AdminVipUpdateRequest_SendBody.Validate if the designated
// constraints aren't met.
type AdminVipUpdateRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminVipUpdateRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminVipUpdateRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminVipUpdateRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminVipUpdateRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminVipUpdateRequest_SendBodyValidationError) ErrorName() string {
	return "AdminVipUpdateRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminVipUpdateRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminVipUpdateRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminVipUpdateRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminVipUpdateRequest_SendBodyValidationError{}

// Validate checks the field values on AdminUndoUpdateRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUndoUpdateRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUndoUpdateRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminUndoUpdateRequest_SendBodyMultiError, or nil if none found.
func (m *AdminUndoUpdateRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUndoUpdateRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Undo

	if len(errors) > 0 {
		return AdminUndoUpdateRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminUndoUpdateRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by AdminUndoUpdateRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type AdminUndoUpdateRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUndoUpdateRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUndoUpdateRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminUndoUpdateRequest_SendBodyValidationError is the validation error
// returned by AdminUndoUpdateRequest_SendBody.Validate if the designated
// constraints aren't met.
type AdminUndoUpdateRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUndoUpdateRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUndoUpdateRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUndoUpdateRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUndoUpdateRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUndoUpdateRequest_SendBodyValidationError) ErrorName() string {
	return "AdminUndoUpdateRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUndoUpdateRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUndoUpdateRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUndoUpdateRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUndoUpdateRequest_SendBodyValidationError{}

// Validate checks the field values on AdminAreaLevelUpdateRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminAreaLevelUpdateRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminAreaLevelUpdateRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminAreaLevelUpdateRequest_SendBodyMultiError, or nil if none found.
func (m *AdminAreaLevelUpdateRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminAreaLevelUpdateRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Level

	if len(errors) > 0 {
		return AdminAreaLevelUpdateRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminAreaLevelUpdateRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// AdminAreaLevelUpdateRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type AdminAreaLevelUpdateRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminAreaLevelUpdateRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminAreaLevelUpdateRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminAreaLevelUpdateRequest_SendBodyValidationError is the validation error
// returned by AdminAreaLevelUpdateRequest_SendBody.Validate if the designated
// constraints aren't met.
type AdminAreaLevelUpdateRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminAreaLevelUpdateRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminAreaLevelUpdateRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminAreaLevelUpdateRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminAreaLevelUpdateRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminAreaLevelUpdateRequest_SendBodyValidationError) ErrorName() string {
	return "AdminAreaLevelUpdateRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminAreaLevelUpdateRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminAreaLevelUpdateRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminAreaLevelUpdateRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminAreaLevelUpdateRequest_SendBodyValidationError{}

// Validate checks the field values on AdminLocationInsertRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminLocationInsertRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLocationInsertRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminLocationInsertRequest_SendBodyMultiError, or nil if none found.
func (m *AdminLocationInsertRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLocationInsertRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Amount

	if len(errors) > 0 {
		return AdminLocationInsertRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminLocationInsertRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// AdminLocationInsertRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type AdminLocationInsertRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLocationInsertRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLocationInsertRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminLocationInsertRequest_SendBodyValidationError is the validation error
// returned by AdminLocationInsertRequest_SendBody.Validate if the designated
// constraints aren't met.
type AdminLocationInsertRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLocationInsertRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLocationInsertRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLocationInsertRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLocationInsertRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLocationInsertRequest_SendBodyValidationError) ErrorName() string {
	return "AdminLocationInsertRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLocationInsertRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLocationInsertRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLocationInsertRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLocationInsertRequest_SendBodyValidationError{}

// Validate checks the field values on AdminBalanceUpdateRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminBalanceUpdateRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminBalanceUpdateRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminBalanceUpdateRequest_SendBodyMultiError, or nil if none found.
func (m *AdminBalanceUpdateRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminBalanceUpdateRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Amount

	if len(errors) > 0 {
		return AdminBalanceUpdateRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminBalanceUpdateRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// AdminBalanceUpdateRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type AdminBalanceUpdateRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminBalanceUpdateRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminBalanceUpdateRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminBalanceUpdateRequest_SendBodyValidationError is the validation error
// returned by AdminBalanceUpdateRequest_SendBody.Validate if the designated
// constraints aren't met.
type AdminBalanceUpdateRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminBalanceUpdateRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminBalanceUpdateRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminBalanceUpdateRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminBalanceUpdateRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminBalanceUpdateRequest_SendBodyValidationError) ErrorName() string {
	return "AdminBalanceUpdateRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminBalanceUpdateRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminBalanceUpdateRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminBalanceUpdateRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminBalanceUpdateRequest_SendBodyValidationError{}

// Validate checks the field values on AuthAdminCreateRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthAdminCreateRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthAdminCreateRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthAdminCreateRequest_SendBodyMultiError, or nil if none found.
func (m *AuthAdminCreateRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthAdminCreateRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminId

	// no validation rules for AuthId

	if len(errors) > 0 {
		return AuthAdminCreateRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AuthAdminCreateRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by AuthAdminCreateRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type AuthAdminCreateRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthAdminCreateRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthAdminCreateRequest_SendBodyMultiError) AllErrors() []error { return m }

// AuthAdminCreateRequest_SendBodyValidationError is the validation error
// returned by AuthAdminCreateRequest_SendBody.Validate if the designated
// constraints aren't met.
type AuthAdminCreateRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthAdminCreateRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthAdminCreateRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthAdminCreateRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthAdminCreateRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthAdminCreateRequest_SendBodyValidationError) ErrorName() string {
	return "AuthAdminCreateRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AuthAdminCreateRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthAdminCreateRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthAdminCreateRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthAdminCreateRequest_SendBodyValidationError{}

// Validate checks the field values on AuthAdminDeleteRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthAdminDeleteRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthAdminDeleteRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthAdminDeleteRequest_SendBodyMultiError, or nil if none found.
func (m *AuthAdminDeleteRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthAdminDeleteRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminId

	// no validation rules for AuthId

	if len(errors) > 0 {
		return AuthAdminDeleteRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AuthAdminDeleteRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by AuthAdminDeleteRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type AuthAdminDeleteRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthAdminDeleteRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthAdminDeleteRequest_SendBodyMultiError) AllErrors() []error { return m }

// AuthAdminDeleteRequest_SendBodyValidationError is the validation error
// returned by AuthAdminDeleteRequest_SendBody.Validate if the designated
// constraints aren't met.
type AuthAdminDeleteRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthAdminDeleteRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthAdminDeleteRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthAdminDeleteRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthAdminDeleteRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthAdminDeleteRequest_SendBodyValidationError) ErrorName() string {
	return "AuthAdminDeleteRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AuthAdminDeleteRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthAdminDeleteRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthAdminDeleteRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthAdminDeleteRequest_SendBodyValidationError{}

// Validate checks the field values on AdminLoginRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminLoginRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLoginRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminLoginRequest_SendBodyMultiError, or nil if none found.
func (m *AdminLoginRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLoginRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	if len(errors) > 0 {
		return AdminLoginRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminLoginRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by AdminLoginRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type AdminLoginRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLoginRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLoginRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminLoginRequest_SendBodyValidationError is the validation error returned
// by AdminLoginRequest_SendBody.Validate if the designated constraints aren't met.
type AdminLoginRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLoginRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLoginRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLoginRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLoginRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLoginRequest_SendBodyValidationError) ErrorName() string {
	return "AdminLoginRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminLoginRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLoginRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLoginRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLoginRequest_SendBodyValidationError{}

// Validate checks the field values on AdminChangePasswordRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminChangePasswordRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminChangePasswordRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminChangePasswordRequest_SendBodyMultiError, or nil if none found.
func (m *AdminChangePasswordRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminChangePasswordRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	if len(errors) > 0 {
		return AdminChangePasswordRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminChangePasswordRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// AdminChangePasswordRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type AdminChangePasswordRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminChangePasswordRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminChangePasswordRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminChangePasswordRequest_SendBodyValidationError is the validation error
// returned by AdminChangePasswordRequest_SendBody.Validate if the designated
// constraints aren't met.
type AdminChangePasswordRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminChangePasswordRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminChangePasswordRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminChangePasswordRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminChangePasswordRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminChangePasswordRequest_SendBodyValidationError) ErrorName() string {
	return "AdminChangePasswordRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminChangePasswordRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminChangePasswordRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminChangePasswordRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminChangePasswordRequest_SendBodyValidationError{}

// Validate checks the field values on AdminCreateAccountRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminCreateAccountRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCreateAccountRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminCreateAccountRequest_SendBodyMultiError, or nil if none found.
func (m *AdminCreateAccountRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCreateAccountRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	if len(errors) > 0 {
		return AdminCreateAccountRequest_SendBodyMultiError(errors)
	}

	return nil
}

// AdminCreateAccountRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// AdminCreateAccountRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type AdminCreateAccountRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCreateAccountRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCreateAccountRequest_SendBodyMultiError) AllErrors() []error { return m }

// AdminCreateAccountRequest_SendBodyValidationError is the validation error
// returned by AdminCreateAccountRequest_SendBody.Validate if the designated
// constraints aren't met.
type AdminCreateAccountRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCreateAccountRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCreateAccountRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCreateAccountRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCreateAccountRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCreateAccountRequest_SendBodyValidationError) ErrorName() string {
	return "AdminCreateAccountRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCreateAccountRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCreateAccountRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCreateAccountRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCreateAccountRequest_SendBodyValidationError{}
