// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.7
// source: app/app/api/app.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppAdminAll = "/api.App/AdminAll"
const OperationAppAdminAreaLevelUpdate = "/api.App/AdminAreaLevelUpdate"
const OperationAppAdminBalanceUpdate = "/api.App/AdminBalanceUpdate"
const OperationAppAdminChangePassword = "/api.App/AdminChangePassword"
const OperationAppAdminConfig = "/api.App/AdminConfig"
const OperationAppAdminConfigUpdate = "/api.App/AdminConfigUpdate"
const OperationAppAdminCreateAccount = "/api.App/AdminCreateAccount"
const OperationAppAdminDailyBalanceReward = "/api.App/AdminDailyBalanceReward"
const OperationAppAdminDailyFee = "/api.App/AdminDailyFee"
const OperationAppAdminDailyLocationReward = "/api.App/AdminDailyLocationReward"
const OperationAppAdminDailyLocationRewardNew = "/api.App/AdminDailyLocationRewardNew"
const OperationAppAdminDailyRecommendReward = "/api.App/AdminDailyRecommendReward"
const OperationAppAdminFee = "/api.App/AdminFee"
const OperationAppAdminList = "/api.App/AdminList"
const OperationAppAdminLocationAllList = "/api.App/AdminLocationAllList"
const OperationAppAdminLocationInsert = "/api.App/AdminLocationInsert"
const OperationAppAdminLocationList = "/api.App/AdminLocationList"
const OperationAppAdminLogin = "/api.App/AdminLogin"
const OperationAppAdminMonthRecommend = "/api.App/AdminMonthRecommend"
const OperationAppAdminRecordList = "/api.App/AdminRecordList"
const OperationAppAdminRewardList = "/api.App/AdminRewardList"
const OperationAppAdminTrade = "/api.App/AdminTrade"
const OperationAppAdminTradeList = "/api.App/AdminTradeList"
const OperationAppAdminUndoUpdate = "/api.App/AdminUndoUpdate"
const OperationAppAdminUpdateLocationNewMax = "/api.App/AdminUpdateLocationNewMax"
const OperationAppAdminUserList = "/api.App/AdminUserList"
const OperationAppAdminUserPasswordUpdate = "/api.App/AdminUserPasswordUpdate"
const OperationAppAdminUserRecommend = "/api.App/AdminUserRecommend"
const OperationAppAdminVipUpdate = "/api.App/AdminVipUpdate"
const OperationAppAdminWithdraw = "/api.App/AdminWithdraw"
const OperationAppAdminWithdrawEth = "/api.App/AdminWithdrawEth"
const OperationAppAdminWithdrawList = "/api.App/AdminWithdrawList"
const OperationAppAdminWithdrawPass = "/api.App/AdminWithdrawPass"
const OperationAppAuthAdminCreate = "/api.App/AuthAdminCreate"
const OperationAppAuthAdminDelete = "/api.App/AuthAdminDelete"
const OperationAppAuthList = "/api.App/AuthList"
const OperationAppCheckAdminUserArea = "/api.App/CheckAdminUserArea"
const OperationAppCheckAndInsertLocationsRecommendUser = "/api.App/CheckAndInsertLocationsRecommendUser"
const OperationAppCheckAndInsertRecommendArea = "/api.App/CheckAndInsertRecommendArea"
const OperationAppDeposit = "/api.App/Deposit"
const OperationAppDeposit2 = "/api.App/Deposit2"
const OperationAppDeposit3 = "/api.App/Deposit3"
const OperationAppDeposit4 = "/api.App/Deposit4"
const OperationAppFeeRewardList = "/api.App/FeeRewardList"
const OperationAppLockSystem = "/api.App/LockSystem"
const OperationAppMyAuthList = "/api.App/MyAuthList"
const OperationAppRecommendList = "/api.App/RecommendList"
const OperationAppRecommendRewardList = "/api.App/RecommendRewardList"
const OperationAppRewardList = "/api.App/RewardList"
const OperationAppUserAuthList = "/api.App/UserAuthList"
const OperationAppUserInfo = "/api.App/UserInfo"
const OperationAppVipCheck = "/api.App/VipCheck"
const OperationAppWithdraw = "/api.App/Withdraw"
const OperationAppWithdrawList = "/api.App/WithdrawList"

type AppHTTPServer interface {
	AdminAll(context.Context, *AdminAllRequest) (*AdminAllReply, error)
	AdminAreaLevelUpdate(context.Context, *AdminAreaLevelUpdateRequest) (*AdminAreaLevelUpdateReply, error)
	AdminBalanceUpdate(context.Context, *AdminBalanceUpdateRequest) (*AdminBalanceUpdateReply, error)
	AdminChangePassword(context.Context, *AdminChangePasswordRequest) (*AdminChangePasswordReply, error)
	AdminConfig(context.Context, *AdminConfigRequest) (*AdminConfigReply, error)
	AdminConfigUpdate(context.Context, *AdminConfigUpdateRequest) (*AdminConfigUpdateReply, error)
	AdminCreateAccount(context.Context, *AdminCreateAccountRequest) (*AdminCreateAccountReply, error)
	AdminDailyBalanceReward(context.Context, *AdminDailyBalanceRewardRequest) (*AdminDailyBalanceRewardReply, error)
	AdminDailyFee(context.Context, *AdminDailyFeeRequest) (*AdminDailyFeeReply, error)
	AdminDailyLocationReward(context.Context, *AdminDailyLocationRewardRequest) (*AdminDailyLocationRewardReply, error)
	AdminDailyLocationRewardNew(context.Context, *AdminDailyLocationRewardNewRequest) (*AdminDailyLocationRewardNewReply, error)
	AdminDailyRecommendReward(context.Context, *AdminDailyRecommendRewardRequest) (*AdminDailyRecommendRewardReply, error)
	AdminFee(context.Context, *AdminFeeRequest) (*AdminFeeReply, error)
	AdminList(context.Context, *AdminListRequest) (*AdminListReply, error)
	AdminLocationAllList(context.Context, *AdminLocationAllListRequest) (*AdminLocationAllListReply, error)
	AdminLocationInsert(context.Context, *AdminLocationInsertRequest) (*AdminLocationInsertReply, error)
	AdminLocationList(context.Context, *AdminLocationListRequest) (*AdminLocationListReply, error)
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginReply, error)
	AdminMonthRecommend(context.Context, *AdminMonthRecommendRequest) (*AdminMonthRecommendReply, error)
	AdminRecordList(context.Context, *RecordListRequest) (*RecordListReply, error)
	AdminRewardList(context.Context, *AdminRewardListRequest) (*AdminRewardListReply, error)
	AdminTrade(context.Context, *AdminTradeRequest) (*AdminTradeReply, error)
	AdminTradeList(context.Context, *AdminTradeListRequest) (*AdminTradeListReply, error)
	AdminUndoUpdate(context.Context, *AdminUndoUpdateRequest) (*AdminUndoUpdateReply, error)
	AdminUpdateLocationNewMax(context.Context, *AdminUpdateLocationNewMaxRequest) (*AdminUpdateLocationNewMaxReply, error)
	AdminUserList(context.Context, *AdminUserListRequest) (*AdminUserListReply, error)
	AdminUserPasswordUpdate(context.Context, *AdminPasswordUpdateRequest) (*AdminPasswordUpdateReply, error)
	AdminUserRecommend(context.Context, *AdminUserRecommendRequest) (*AdminUserRecommendReply, error)
	AdminVipUpdate(context.Context, *AdminVipUpdateRequest) (*AdminVipUpdateReply, error)
	AdminWithdraw(context.Context, *AdminWithdrawRequest) (*AdminWithdrawReply, error)
	AdminWithdrawEth(context.Context, *AdminWithdrawEthRequest) (*AdminWithdrawEthReply, error)
	AdminWithdrawList(context.Context, *AdminWithdrawListRequest) (*AdminWithdrawListReply, error)
	AdminWithdrawPass(context.Context, *AdminWithdrawPassRequest) (*AdminWithdrawPassReply, error)
	AuthAdminCreate(context.Context, *AuthAdminCreateRequest) (*AuthAdminCreateReply, error)
	AuthAdminDelete(context.Context, *AuthAdminDeleteRequest) (*AuthAdminDeleteReply, error)
	AuthList(context.Context, *AuthListRequest) (*AuthListReply, error)
	CheckAdminUserArea(context.Context, *CheckAdminUserAreaRequest) (*CheckAdminUserAreaReply, error)
	CheckAndInsertLocationsRecommendUser(context.Context, *CheckAndInsertLocationsRecommendUserRequest) (*CheckAndInsertLocationsRecommendUserReply, error)
	CheckAndInsertRecommendArea(context.Context, *CheckAndInsertRecommendAreaRequest) (*CheckAndInsertRecommendAreaReply, error)
	Deposit(context.Context, *DepositRequest) (*DepositReply, error)
	Deposit2(context.Context, *DepositRequest) (*DepositReply, error)
	Deposit3(context.Context, *DepositRequest) (*DepositReply, error)
	Deposit4(context.Context, *DepositRequest) (*DepositReply, error)
	FeeRewardList(context.Context, *FeeRewardListRequest) (*FeeRewardListReply, error)
	LockSystem(context.Context, *LockSystemRequest) (*LockSystemReply, error)
	MyAuthList(context.Context, *MyAuthListRequest) (*MyAuthListReply, error)
	RecommendList(context.Context, *RecommendListRequest) (*RecommendListReply, error)
	RecommendRewardList(context.Context, *RecommendRewardListRequest) (*RecommendRewardListReply, error)
	RewardList(context.Context, *RewardListRequest) (*RewardListReply, error)
	UserAuthList(context.Context, *UserAuthListRequest) (*UserAuthListReply, error)
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoReply, error)
	VipCheck(context.Context, *VipCheckRequest) (*VipCheckReply, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawReply, error)
	WithdrawList(context.Context, *WithdrawListRequest) (*WithdrawListReply, error)
}

func RegisterAppHTTPServer(s *http.Server, srv AppHTTPServer) {
	r := s.Route("/")
	r.GET("/api/app_server/user_info", _App_UserInfo0_HTTP_Handler(srv))
	r.GET("/api/app_server/reward_list", _App_RewardList0_HTTP_Handler(srv))
	r.GET("/api/app_server/recommend_reward_list", _App_RecommendRewardList0_HTTP_Handler(srv))
	r.GET("/api/app_server/fee_reward_list", _App_FeeRewardList0_HTTP_Handler(srv))
	r.GET("/api/app_server/withdraw_list", _App_WithdrawList0_HTTP_Handler(srv))
	r.GET("/api/app_server/recommend_list", _App_RecommendList0_HTTP_Handler(srv))
	r.POST("/api/app_server/withdraw", _App_Withdraw0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/deposit", _App_Deposit0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/deposit_3", _App_Deposit30_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/deposit_4", _App_Deposit40_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/vip_check", _App_VipCheck0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/deposit_2", _App_Deposit20_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/reward_list", _App_AdminRewardList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/trade_list", _App_AdminTradeList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/lock_system", _App_LockSystem0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/user_list", _App_AdminUserList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/check_admin_user_area", _App_CheckAdminUserArea0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/check_and_insert_locations_recommend_user", _App_CheckAndInsertLocationsRecommendUser0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/location_list", _App_AdminLocationList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/record_list", _App_AdminRecordList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/location_all_list", _App_AdminLocationAllList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/withdraw_list", _App_AdminWithdrawList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/withdraw", _App_AdminWithdraw0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/trade", _App_AdminTrade0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/withdraw_pass", _App_AdminWithdrawPass0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/withdraw_eth", _App_AdminWithdrawEth0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/fee", _App_AdminFee0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/daily_fee", _App_AdminDailyFee0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/all", _App_AdminAll0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/user_recommend", _App_AdminUserRecommend0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/month_recommend", _App_AdminMonthRecommend0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/config", _App_AdminConfig0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/config_update", _App_AdminConfigUpdate0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/password_update", _App_AdminUserPasswordUpdate0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/admin_update_location_new_max", _App_AdminUpdateLocationNewMax0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/vip_update", _App_AdminVipUpdate0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/undo_update", _App_AdminUndoUpdate0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/level_update", _App_AdminAreaLevelUpdate0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/location_insert", _App_AdminLocationInsert0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/balance_update", _App_AdminBalanceUpdate0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/login", _App_AdminLogin0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/create_account", _App_AdminCreateAccount0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/change_password", _App_AdminChangePassword0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/admin_list", _App_AdminList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/auth_list", _App_AuthList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/my_auth_list", _App_MyAuthList0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/user_auth_list", _App_UserAuthList0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/auth_create", _App_AuthAdminCreate0_HTTP_Handler(srv))
	r.POST("/api/admin_dhb/auth_delete", _App_AuthAdminDelete0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/check_and_insert_recommend_area", _App_CheckAndInsertRecommendArea0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/daily_recommend_reward", _App_AdminDailyRecommendReward0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/daily_balance_reward", _App_AdminDailyBalanceReward0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/daily_location_reward", _App_AdminDailyLocationReward0_HTTP_Handler(srv))
	r.GET("/api/admin_dhb/daily_location_reward_new", _App_AdminDailyLocationRewardNew0_HTTP_Handler(srv))
}

func _App_UserInfo0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserInfo(ctx, req.(*UserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _App_RewardList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RewardListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppRewardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RewardList(ctx, req.(*RewardListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RewardListReply)
		return ctx.Result(200, reply)
	}
}

func _App_RecommendRewardList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecommendRewardListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppRecommendRewardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecommendRewardList(ctx, req.(*RecommendRewardListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecommendRewardListReply)
		return ctx.Result(200, reply)
	}
}

func _App_FeeRewardList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FeeRewardListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppFeeRewardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FeeRewardList(ctx, req.(*FeeRewardListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FeeRewardListReply)
		return ctx.Result(200, reply)
	}
}

func _App_WithdrawList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WithdrawListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppWithdrawList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WithdrawList(ctx, req.(*WithdrawListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WithdrawListReply)
		return ctx.Result(200, reply)
	}
}

func _App_RecommendList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecommendListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppRecommendList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecommendList(ctx, req.(*RecommendListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecommendListReply)
		return ctx.Result(200, reply)
	}
}

func _App_Withdraw0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WithdrawRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppWithdraw)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Withdraw(ctx, req.(*WithdrawRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WithdrawReply)
		return ctx.Result(200, reply)
	}
}

func _App_Deposit0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DepositRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppDeposit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Deposit(ctx, req.(*DepositRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DepositReply)
		return ctx.Result(200, reply)
	}
}

func _App_Deposit30_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DepositRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppDeposit3)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Deposit3(ctx, req.(*DepositRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DepositReply)
		return ctx.Result(200, reply)
	}
}

func _App_Deposit40_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DepositRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppDeposit4)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Deposit4(ctx, req.(*DepositRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DepositReply)
		return ctx.Result(200, reply)
	}
}

func _App_VipCheck0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipCheckRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppVipCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VipCheck(ctx, req.(*VipCheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipCheckReply)
		return ctx.Result(200, reply)
	}
}

func _App_Deposit20_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DepositRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppDeposit2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Deposit2(ctx, req.(*DepositRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DepositReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminRewardList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminRewardListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminRewardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminRewardList(ctx, req.(*AdminRewardListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminRewardListReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminTradeList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminTradeListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminTradeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminTradeList(ctx, req.(*AdminTradeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminTradeListReply)
		return ctx.Result(200, reply)
	}
}

func _App_LockSystem0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LockSystemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppLockSystem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LockSystem(ctx, req.(*LockSystemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LockSystemReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminUserList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminUserListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminUserList(ctx, req.(*AdminUserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminUserListReply)
		return ctx.Result(200, reply)
	}
}

func _App_CheckAdminUserArea0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckAdminUserAreaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppCheckAdminUserArea)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckAdminUserArea(ctx, req.(*CheckAdminUserAreaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckAdminUserAreaReply)
		return ctx.Result(200, reply)
	}
}

func _App_CheckAndInsertLocationsRecommendUser0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckAndInsertLocationsRecommendUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppCheckAndInsertLocationsRecommendUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckAndInsertLocationsRecommendUser(ctx, req.(*CheckAndInsertLocationsRecommendUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckAndInsertLocationsRecommendUserReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminLocationList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminLocationListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminLocationList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminLocationList(ctx, req.(*AdminLocationListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminLocationListReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminRecordList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecordListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminRecordList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminRecordList(ctx, req.(*RecordListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecordListReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminLocationAllList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminLocationAllListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminLocationAllList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminLocationAllList(ctx, req.(*AdminLocationAllListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminLocationAllListReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminWithdrawList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminWithdrawListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminWithdrawList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminWithdrawList(ctx, req.(*AdminWithdrawListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminWithdrawListReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminWithdraw0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminWithdrawRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminWithdraw)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminWithdraw(ctx, req.(*AdminWithdrawRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminWithdrawReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminTrade0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminTradeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminTrade)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminTrade(ctx, req.(*AdminTradeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminTradeReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminWithdrawPass0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminWithdrawPassRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminWithdrawPass)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminWithdrawPass(ctx, req.(*AdminWithdrawPassRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminWithdrawPassReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminWithdrawEth0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminWithdrawEthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminWithdrawEth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminWithdrawEth(ctx, req.(*AdminWithdrawEthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminWithdrawEthReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminFee0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminFeeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminFee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminFee(ctx, req.(*AdminFeeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminFeeReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminDailyFee0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminDailyFeeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminDailyFee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminDailyFee(ctx, req.(*AdminDailyFeeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminDailyFeeReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminAll0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminAllRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminAll(ctx, req.(*AdminAllRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminAllReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminUserRecommend0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminUserRecommendRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminUserRecommend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminUserRecommend(ctx, req.(*AdminUserRecommendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminUserRecommendReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminMonthRecommend0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminMonthRecommendRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminMonthRecommend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminMonthRecommend(ctx, req.(*AdminMonthRecommendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminMonthRecommendReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminConfig0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminConfig(ctx, req.(*AdminConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminConfigReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminConfigUpdate0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminConfigUpdateRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminConfigUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminConfigUpdate(ctx, req.(*AdminConfigUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminConfigUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminUserPasswordUpdate0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminPasswordUpdateRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminUserPasswordUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminUserPasswordUpdate(ctx, req.(*AdminPasswordUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminPasswordUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminUpdateLocationNewMax0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminUpdateLocationNewMaxRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminUpdateLocationNewMax)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminUpdateLocationNewMax(ctx, req.(*AdminUpdateLocationNewMaxRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminUpdateLocationNewMaxReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminVipUpdate0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminVipUpdateRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminVipUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminVipUpdate(ctx, req.(*AdminVipUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminVipUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminUndoUpdate0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminUndoUpdateRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminUndoUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminUndoUpdate(ctx, req.(*AdminUndoUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminUndoUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminAreaLevelUpdate0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminAreaLevelUpdateRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminAreaLevelUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminAreaLevelUpdate(ctx, req.(*AdminAreaLevelUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminAreaLevelUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminLocationInsert0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminLocationInsertRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminLocationInsert)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminLocationInsert(ctx, req.(*AdminLocationInsertRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminLocationInsertReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminBalanceUpdate0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminBalanceUpdateRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminBalanceUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminBalanceUpdate(ctx, req.(*AdminBalanceUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminBalanceUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminLogin0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminLoginRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminLogin(ctx, req.(*AdminLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminLoginReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminCreateAccount0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminCreateAccountRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminCreateAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminCreateAccount(ctx, req.(*AdminCreateAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminCreateAccountReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminChangePassword0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminChangePasswordRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminChangePassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminChangePassword(ctx, req.(*AdminChangePasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminChangePasswordReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminList(ctx, req.(*AdminListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminListReply)
		return ctx.Result(200, reply)
	}
}

func _App_AuthList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAuthList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AuthList(ctx, req.(*AuthListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthListReply)
		return ctx.Result(200, reply)
	}
}

func _App_MyAuthList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyAuthListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppMyAuthList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyAuthList(ctx, req.(*MyAuthListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyAuthListReply)
		return ctx.Result(200, reply)
	}
}

func _App_UserAuthList0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserAuthListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppUserAuthList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserAuthList(ctx, req.(*UserAuthListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserAuthListReply)
		return ctx.Result(200, reply)
	}
}

func _App_AuthAdminCreate0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthAdminCreateRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAuthAdminCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AuthAdminCreate(ctx, req.(*AuthAdminCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthAdminCreateReply)
		return ctx.Result(200, reply)
	}
}

func _App_AuthAdminDelete0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthAdminDeleteRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAuthAdminDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AuthAdminDelete(ctx, req.(*AuthAdminDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthAdminDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _App_CheckAndInsertRecommendArea0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckAndInsertRecommendAreaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppCheckAndInsertRecommendArea)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckAndInsertRecommendArea(ctx, req.(*CheckAndInsertRecommendAreaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckAndInsertRecommendAreaReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminDailyRecommendReward0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminDailyRecommendRewardRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminDailyRecommendReward)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminDailyRecommendReward(ctx, req.(*AdminDailyRecommendRewardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminDailyRecommendRewardReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminDailyBalanceReward0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminDailyBalanceRewardRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminDailyBalanceReward)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminDailyBalanceReward(ctx, req.(*AdminDailyBalanceRewardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminDailyBalanceRewardReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminDailyLocationReward0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminDailyLocationRewardRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminDailyLocationReward)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminDailyLocationReward(ctx, req.(*AdminDailyLocationRewardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminDailyLocationRewardReply)
		return ctx.Result(200, reply)
	}
}

func _App_AdminDailyLocationRewardNew0_HTTP_Handler(srv AppHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminDailyLocationRewardNewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppAdminDailyLocationRewardNew)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminDailyLocationRewardNew(ctx, req.(*AdminDailyLocationRewardNewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminDailyLocationRewardNewReply)
		return ctx.Result(200, reply)
	}
}

type AppHTTPClient interface {
	AdminAll(ctx context.Context, req *AdminAllRequest, opts ...http.CallOption) (rsp *AdminAllReply, err error)
	AdminAreaLevelUpdate(ctx context.Context, req *AdminAreaLevelUpdateRequest, opts ...http.CallOption) (rsp *AdminAreaLevelUpdateReply, err error)
	AdminBalanceUpdate(ctx context.Context, req *AdminBalanceUpdateRequest, opts ...http.CallOption) (rsp *AdminBalanceUpdateReply, err error)
	AdminChangePassword(ctx context.Context, req *AdminChangePasswordRequest, opts ...http.CallOption) (rsp *AdminChangePasswordReply, err error)
	AdminConfig(ctx context.Context, req *AdminConfigRequest, opts ...http.CallOption) (rsp *AdminConfigReply, err error)
	AdminConfigUpdate(ctx context.Context, req *AdminConfigUpdateRequest, opts ...http.CallOption) (rsp *AdminConfigUpdateReply, err error)
	AdminCreateAccount(ctx context.Context, req *AdminCreateAccountRequest, opts ...http.CallOption) (rsp *AdminCreateAccountReply, err error)
	AdminDailyBalanceReward(ctx context.Context, req *AdminDailyBalanceRewardRequest, opts ...http.CallOption) (rsp *AdminDailyBalanceRewardReply, err error)
	AdminDailyFee(ctx context.Context, req *AdminDailyFeeRequest, opts ...http.CallOption) (rsp *AdminDailyFeeReply, err error)
	AdminDailyLocationReward(ctx context.Context, req *AdminDailyLocationRewardRequest, opts ...http.CallOption) (rsp *AdminDailyLocationRewardReply, err error)
	AdminDailyLocationRewardNew(ctx context.Context, req *AdminDailyLocationRewardNewRequest, opts ...http.CallOption) (rsp *AdminDailyLocationRewardNewReply, err error)
	AdminDailyRecommendReward(ctx context.Context, req *AdminDailyRecommendRewardRequest, opts ...http.CallOption) (rsp *AdminDailyRecommendRewardReply, err error)
	AdminFee(ctx context.Context, req *AdminFeeRequest, opts ...http.CallOption) (rsp *AdminFeeReply, err error)
	AdminList(ctx context.Context, req *AdminListRequest, opts ...http.CallOption) (rsp *AdminListReply, err error)
	AdminLocationAllList(ctx context.Context, req *AdminLocationAllListRequest, opts ...http.CallOption) (rsp *AdminLocationAllListReply, err error)
	AdminLocationInsert(ctx context.Context, req *AdminLocationInsertRequest, opts ...http.CallOption) (rsp *AdminLocationInsertReply, err error)
	AdminLocationList(ctx context.Context, req *AdminLocationListRequest, opts ...http.CallOption) (rsp *AdminLocationListReply, err error)
	AdminLogin(ctx context.Context, req *AdminLoginRequest, opts ...http.CallOption) (rsp *AdminLoginReply, err error)
	AdminMonthRecommend(ctx context.Context, req *AdminMonthRecommendRequest, opts ...http.CallOption) (rsp *AdminMonthRecommendReply, err error)
	AdminRecordList(ctx context.Context, req *RecordListRequest, opts ...http.CallOption) (rsp *RecordListReply, err error)
	AdminRewardList(ctx context.Context, req *AdminRewardListRequest, opts ...http.CallOption) (rsp *AdminRewardListReply, err error)
	AdminTrade(ctx context.Context, req *AdminTradeRequest, opts ...http.CallOption) (rsp *AdminTradeReply, err error)
	AdminTradeList(ctx context.Context, req *AdminTradeListRequest, opts ...http.CallOption) (rsp *AdminTradeListReply, err error)
	AdminUndoUpdate(ctx context.Context, req *AdminUndoUpdateRequest, opts ...http.CallOption) (rsp *AdminUndoUpdateReply, err error)
	AdminUpdateLocationNewMax(ctx context.Context, req *AdminUpdateLocationNewMaxRequest, opts ...http.CallOption) (rsp *AdminUpdateLocationNewMaxReply, err error)
	AdminUserList(ctx context.Context, req *AdminUserListRequest, opts ...http.CallOption) (rsp *AdminUserListReply, err error)
	AdminUserPasswordUpdate(ctx context.Context, req *AdminPasswordUpdateRequest, opts ...http.CallOption) (rsp *AdminPasswordUpdateReply, err error)
	AdminUserRecommend(ctx context.Context, req *AdminUserRecommendRequest, opts ...http.CallOption) (rsp *AdminUserRecommendReply, err error)
	AdminVipUpdate(ctx context.Context, req *AdminVipUpdateRequest, opts ...http.CallOption) (rsp *AdminVipUpdateReply, err error)
	AdminWithdraw(ctx context.Context, req *AdminWithdrawRequest, opts ...http.CallOption) (rsp *AdminWithdrawReply, err error)
	AdminWithdrawEth(ctx context.Context, req *AdminWithdrawEthRequest, opts ...http.CallOption) (rsp *AdminWithdrawEthReply, err error)
	AdminWithdrawList(ctx context.Context, req *AdminWithdrawListRequest, opts ...http.CallOption) (rsp *AdminWithdrawListReply, err error)
	AdminWithdrawPass(ctx context.Context, req *AdminWithdrawPassRequest, opts ...http.CallOption) (rsp *AdminWithdrawPassReply, err error)
	AuthAdminCreate(ctx context.Context, req *AuthAdminCreateRequest, opts ...http.CallOption) (rsp *AuthAdminCreateReply, err error)
	AuthAdminDelete(ctx context.Context, req *AuthAdminDeleteRequest, opts ...http.CallOption) (rsp *AuthAdminDeleteReply, err error)
	AuthList(ctx context.Context, req *AuthListRequest, opts ...http.CallOption) (rsp *AuthListReply, err error)
	CheckAdminUserArea(ctx context.Context, req *CheckAdminUserAreaRequest, opts ...http.CallOption) (rsp *CheckAdminUserAreaReply, err error)
	CheckAndInsertLocationsRecommendUser(ctx context.Context, req *CheckAndInsertLocationsRecommendUserRequest, opts ...http.CallOption) (rsp *CheckAndInsertLocationsRecommendUserReply, err error)
	CheckAndInsertRecommendArea(ctx context.Context, req *CheckAndInsertRecommendAreaRequest, opts ...http.CallOption) (rsp *CheckAndInsertRecommendAreaReply, err error)
	Deposit(ctx context.Context, req *DepositRequest, opts ...http.CallOption) (rsp *DepositReply, err error)
	Deposit2(ctx context.Context, req *DepositRequest, opts ...http.CallOption) (rsp *DepositReply, err error)
	Deposit3(ctx context.Context, req *DepositRequest, opts ...http.CallOption) (rsp *DepositReply, err error)
	Deposit4(ctx context.Context, req *DepositRequest, opts ...http.CallOption) (rsp *DepositReply, err error)
	FeeRewardList(ctx context.Context, req *FeeRewardListRequest, opts ...http.CallOption) (rsp *FeeRewardListReply, err error)
	LockSystem(ctx context.Context, req *LockSystemRequest, opts ...http.CallOption) (rsp *LockSystemReply, err error)
	MyAuthList(ctx context.Context, req *MyAuthListRequest, opts ...http.CallOption) (rsp *MyAuthListReply, err error)
	RecommendList(ctx context.Context, req *RecommendListRequest, opts ...http.CallOption) (rsp *RecommendListReply, err error)
	RecommendRewardList(ctx context.Context, req *RecommendRewardListRequest, opts ...http.CallOption) (rsp *RecommendRewardListReply, err error)
	RewardList(ctx context.Context, req *RewardListRequest, opts ...http.CallOption) (rsp *RewardListReply, err error)
	UserAuthList(ctx context.Context, req *UserAuthListRequest, opts ...http.CallOption) (rsp *UserAuthListReply, err error)
	UserInfo(ctx context.Context, req *UserInfoRequest, opts ...http.CallOption) (rsp *UserInfoReply, err error)
	VipCheck(ctx context.Context, req *VipCheckRequest, opts ...http.CallOption) (rsp *VipCheckReply, err error)
	Withdraw(ctx context.Context, req *WithdrawRequest, opts ...http.CallOption) (rsp *WithdrawReply, err error)
	WithdrawList(ctx context.Context, req *WithdrawListRequest, opts ...http.CallOption) (rsp *WithdrawListReply, err error)
}

type AppHTTPClientImpl struct {
	cc *http.Client
}

func NewAppHTTPClient(client *http.Client) AppHTTPClient {
	return &AppHTTPClientImpl{client}
}

func (c *AppHTTPClientImpl) AdminAll(ctx context.Context, in *AdminAllRequest, opts ...http.CallOption) (*AdminAllReply, error) {
	var out AdminAllReply
	pattern := "/api/admin_dhb/all"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminAreaLevelUpdate(ctx context.Context, in *AdminAreaLevelUpdateRequest, opts ...http.CallOption) (*AdminAreaLevelUpdateReply, error) {
	var out AdminAreaLevelUpdateReply
	pattern := "/api/admin_dhb/level_update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminAreaLevelUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminBalanceUpdate(ctx context.Context, in *AdminBalanceUpdateRequest, opts ...http.CallOption) (*AdminBalanceUpdateReply, error) {
	var out AdminBalanceUpdateReply
	pattern := "/api/admin_dhb/balance_update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminBalanceUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminChangePassword(ctx context.Context, in *AdminChangePasswordRequest, opts ...http.CallOption) (*AdminChangePasswordReply, error) {
	var out AdminChangePasswordReply
	pattern := "/api/admin_dhb/change_password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminChangePassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminConfig(ctx context.Context, in *AdminConfigRequest, opts ...http.CallOption) (*AdminConfigReply, error) {
	var out AdminConfigReply
	pattern := "/api/admin_dhb/config"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminConfigUpdate(ctx context.Context, in *AdminConfigUpdateRequest, opts ...http.CallOption) (*AdminConfigUpdateReply, error) {
	var out AdminConfigUpdateReply
	pattern := "/api/admin_dhb/config_update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminConfigUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminCreateAccount(ctx context.Context, in *AdminCreateAccountRequest, opts ...http.CallOption) (*AdminCreateAccountReply, error) {
	var out AdminCreateAccountReply
	pattern := "/api/admin_dhb/create_account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminCreateAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminDailyBalanceReward(ctx context.Context, in *AdminDailyBalanceRewardRequest, opts ...http.CallOption) (*AdminDailyBalanceRewardReply, error) {
	var out AdminDailyBalanceRewardReply
	pattern := "/api/admin_dhb/daily_balance_reward"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminDailyBalanceReward))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminDailyFee(ctx context.Context, in *AdminDailyFeeRequest, opts ...http.CallOption) (*AdminDailyFeeReply, error) {
	var out AdminDailyFeeReply
	pattern := "/api/admin_dhb/daily_fee"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminDailyFee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminDailyLocationReward(ctx context.Context, in *AdminDailyLocationRewardRequest, opts ...http.CallOption) (*AdminDailyLocationRewardReply, error) {
	var out AdminDailyLocationRewardReply
	pattern := "/api/admin_dhb/daily_location_reward"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminDailyLocationReward))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminDailyLocationRewardNew(ctx context.Context, in *AdminDailyLocationRewardNewRequest, opts ...http.CallOption) (*AdminDailyLocationRewardNewReply, error) {
	var out AdminDailyLocationRewardNewReply
	pattern := "/api/admin_dhb/daily_location_reward_new"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminDailyLocationRewardNew))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminDailyRecommendReward(ctx context.Context, in *AdminDailyRecommendRewardRequest, opts ...http.CallOption) (*AdminDailyRecommendRewardReply, error) {
	var out AdminDailyRecommendRewardReply
	pattern := "/api/admin_dhb/daily_recommend_reward"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminDailyRecommendReward))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminFee(ctx context.Context, in *AdminFeeRequest, opts ...http.CallOption) (*AdminFeeReply, error) {
	var out AdminFeeReply
	pattern := "/api/admin_dhb/fee"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminFee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminList(ctx context.Context, in *AdminListRequest, opts ...http.CallOption) (*AdminListReply, error) {
	var out AdminListReply
	pattern := "/api/admin_dhb/admin_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminLocationAllList(ctx context.Context, in *AdminLocationAllListRequest, opts ...http.CallOption) (*AdminLocationAllListReply, error) {
	var out AdminLocationAllListReply
	pattern := "/api/admin_dhb/location_all_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminLocationAllList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminLocationInsert(ctx context.Context, in *AdminLocationInsertRequest, opts ...http.CallOption) (*AdminLocationInsertReply, error) {
	var out AdminLocationInsertReply
	pattern := "/api/admin_dhb/location_insert"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminLocationInsert))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminLocationList(ctx context.Context, in *AdminLocationListRequest, opts ...http.CallOption) (*AdminLocationListReply, error) {
	var out AdminLocationListReply
	pattern := "/api/admin_dhb/location_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminLocationList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...http.CallOption) (*AdminLoginReply, error) {
	var out AdminLoginReply
	pattern := "/api/admin_dhb/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminMonthRecommend(ctx context.Context, in *AdminMonthRecommendRequest, opts ...http.CallOption) (*AdminMonthRecommendReply, error) {
	var out AdminMonthRecommendReply
	pattern := "/api/admin_dhb/month_recommend"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminMonthRecommend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminRecordList(ctx context.Context, in *RecordListRequest, opts ...http.CallOption) (*RecordListReply, error) {
	var out RecordListReply
	pattern := "/api/admin_dhb/record_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminRecordList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminRewardList(ctx context.Context, in *AdminRewardListRequest, opts ...http.CallOption) (*AdminRewardListReply, error) {
	var out AdminRewardListReply
	pattern := "/api/admin_dhb/reward_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminRewardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminTrade(ctx context.Context, in *AdminTradeRequest, opts ...http.CallOption) (*AdminTradeReply, error) {
	var out AdminTradeReply
	pattern := "/api/admin_dhb/trade"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminTrade))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminTradeList(ctx context.Context, in *AdminTradeListRequest, opts ...http.CallOption) (*AdminTradeListReply, error) {
	var out AdminTradeListReply
	pattern := "/api/admin_dhb/trade_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminTradeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminUndoUpdate(ctx context.Context, in *AdminUndoUpdateRequest, opts ...http.CallOption) (*AdminUndoUpdateReply, error) {
	var out AdminUndoUpdateReply
	pattern := "/api/admin_dhb/undo_update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminUndoUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminUpdateLocationNewMax(ctx context.Context, in *AdminUpdateLocationNewMaxRequest, opts ...http.CallOption) (*AdminUpdateLocationNewMaxReply, error) {
	var out AdminUpdateLocationNewMaxReply
	pattern := "/api/admin_dhb/admin_update_location_new_max"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminUpdateLocationNewMax))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminUserList(ctx context.Context, in *AdminUserListRequest, opts ...http.CallOption) (*AdminUserListReply, error) {
	var out AdminUserListReply
	pattern := "/api/admin_dhb/user_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminUserPasswordUpdate(ctx context.Context, in *AdminPasswordUpdateRequest, opts ...http.CallOption) (*AdminPasswordUpdateReply, error) {
	var out AdminPasswordUpdateReply
	pattern := "/api/admin_dhb/password_update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminUserPasswordUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminUserRecommend(ctx context.Context, in *AdminUserRecommendRequest, opts ...http.CallOption) (*AdminUserRecommendReply, error) {
	var out AdminUserRecommendReply
	pattern := "/api/admin_dhb/user_recommend"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminUserRecommend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminVipUpdate(ctx context.Context, in *AdminVipUpdateRequest, opts ...http.CallOption) (*AdminVipUpdateReply, error) {
	var out AdminVipUpdateReply
	pattern := "/api/admin_dhb/vip_update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminVipUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminWithdraw(ctx context.Context, in *AdminWithdrawRequest, opts ...http.CallOption) (*AdminWithdrawReply, error) {
	var out AdminWithdrawReply
	pattern := "/api/admin_dhb/withdraw"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminWithdraw))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminWithdrawEth(ctx context.Context, in *AdminWithdrawEthRequest, opts ...http.CallOption) (*AdminWithdrawEthReply, error) {
	var out AdminWithdrawEthReply
	pattern := "/api/admin_dhb/withdraw_eth"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminWithdrawEth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminWithdrawList(ctx context.Context, in *AdminWithdrawListRequest, opts ...http.CallOption) (*AdminWithdrawListReply, error) {
	var out AdminWithdrawListReply
	pattern := "/api/admin_dhb/withdraw_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAdminWithdrawList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AdminWithdrawPass(ctx context.Context, in *AdminWithdrawPassRequest, opts ...http.CallOption) (*AdminWithdrawPassReply, error) {
	var out AdminWithdrawPassReply
	pattern := "/api/admin_dhb/withdraw_pass"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAdminWithdrawPass))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AuthAdminCreate(ctx context.Context, in *AuthAdminCreateRequest, opts ...http.CallOption) (*AuthAdminCreateReply, error) {
	var out AuthAdminCreateReply
	pattern := "/api/admin_dhb/auth_create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAuthAdminCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AuthAdminDelete(ctx context.Context, in *AuthAdminDeleteRequest, opts ...http.CallOption) (*AuthAdminDeleteReply, error) {
	var out AuthAdminDeleteReply
	pattern := "/api/admin_dhb/auth_delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppAuthAdminDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) AuthList(ctx context.Context, in *AuthListRequest, opts ...http.CallOption) (*AuthListReply, error) {
	var out AuthListReply
	pattern := "/api/admin_dhb/auth_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppAuthList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) CheckAdminUserArea(ctx context.Context, in *CheckAdminUserAreaRequest, opts ...http.CallOption) (*CheckAdminUserAreaReply, error) {
	var out CheckAdminUserAreaReply
	pattern := "/api/admin_dhb/check_admin_user_area"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppCheckAdminUserArea))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) CheckAndInsertLocationsRecommendUser(ctx context.Context, in *CheckAndInsertLocationsRecommendUserRequest, opts ...http.CallOption) (*CheckAndInsertLocationsRecommendUserReply, error) {
	var out CheckAndInsertLocationsRecommendUserReply
	pattern := "/api/admin_dhb/check_and_insert_locations_recommend_user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppCheckAndInsertLocationsRecommendUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) CheckAndInsertRecommendArea(ctx context.Context, in *CheckAndInsertRecommendAreaRequest, opts ...http.CallOption) (*CheckAndInsertRecommendAreaReply, error) {
	var out CheckAndInsertRecommendAreaReply
	pattern := "/api/admin_dhb/check_and_insert_recommend_area"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppCheckAndInsertRecommendArea))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) Deposit(ctx context.Context, in *DepositRequest, opts ...http.CallOption) (*DepositReply, error) {
	var out DepositReply
	pattern := "/api/admin_dhb/deposit"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppDeposit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) Deposit2(ctx context.Context, in *DepositRequest, opts ...http.CallOption) (*DepositReply, error) {
	var out DepositReply
	pattern := "/api/admin_dhb/deposit_2"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppDeposit2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) Deposit3(ctx context.Context, in *DepositRequest, opts ...http.CallOption) (*DepositReply, error) {
	var out DepositReply
	pattern := "/api/admin_dhb/deposit_3"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppDeposit3))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) Deposit4(ctx context.Context, in *DepositRequest, opts ...http.CallOption) (*DepositReply, error) {
	var out DepositReply
	pattern := "/api/admin_dhb/deposit_4"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppDeposit4))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) FeeRewardList(ctx context.Context, in *FeeRewardListRequest, opts ...http.CallOption) (*FeeRewardListReply, error) {
	var out FeeRewardListReply
	pattern := "/api/app_server/fee_reward_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppFeeRewardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) LockSystem(ctx context.Context, in *LockSystemRequest, opts ...http.CallOption) (*LockSystemReply, error) {
	var out LockSystemReply
	pattern := "/api/admin_dhb/lock_system"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppLockSystem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) MyAuthList(ctx context.Context, in *MyAuthListRequest, opts ...http.CallOption) (*MyAuthListReply, error) {
	var out MyAuthListReply
	pattern := "/api/admin_dhb/my_auth_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppMyAuthList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) RecommendList(ctx context.Context, in *RecommendListRequest, opts ...http.CallOption) (*RecommendListReply, error) {
	var out RecommendListReply
	pattern := "/api/app_server/recommend_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppRecommendList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) RecommendRewardList(ctx context.Context, in *RecommendRewardListRequest, opts ...http.CallOption) (*RecommendRewardListReply, error) {
	var out RecommendRewardListReply
	pattern := "/api/app_server/recommend_reward_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppRecommendRewardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) RewardList(ctx context.Context, in *RewardListRequest, opts ...http.CallOption) (*RewardListReply, error) {
	var out RewardListReply
	pattern := "/api/app_server/reward_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppRewardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) UserAuthList(ctx context.Context, in *UserAuthListRequest, opts ...http.CallOption) (*UserAuthListReply, error) {
	var out UserAuthListReply
	pattern := "/api/admin_dhb/user_auth_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserAuthList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...http.CallOption) (*UserInfoReply, error) {
	var out UserInfoReply
	pattern := "/api/app_server/user_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) VipCheck(ctx context.Context, in *VipCheckRequest, opts ...http.CallOption) (*VipCheckReply, error) {
	var out VipCheckReply
	pattern := "/api/admin_dhb/vip_check"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppVipCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...http.CallOption) (*WithdrawReply, error) {
	var out WithdrawReply
	pattern := "/api/app_server/withdraw"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppWithdraw))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AppHTTPClientImpl) WithdrawList(ctx context.Context, in *WithdrawListRequest, opts ...http.CallOption) (*WithdrawListReply, error) {
	var out WithdrawListReply
	pattern := "/api/app_server/withdraw_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppWithdrawList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
