// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"dhb/app/app/internal/biz"
	"dhb/app/app/internal/conf"
	"dhb/app/app/internal/data"
	"dhb/app/app/internal/server"
	"dhb/app/app/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, auth *conf.Auth, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData)
	client := data.NewRedis(confData)
	dataData, cleanup, err := data.NewData(confData, logger, db, client)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	transaction := data.NewTransaction(dataData)
	configRepo := data.NewConfigRepo(dataData, logger)
	userInfoRepo := data.NewUserInfoRepo(dataData, logger)
	userRecommendRepo := data.NewUserRecommendRepo(dataData, logger)
	locationRepo := data.NewLocationRepo(dataData, logger)
	userCurrentMonthRecommendRepo := data.NewUserCurrentMonthRecommendRepo(dataData, logger)
	userBalanceRepo := data.NewUserBalanceRepo(dataData, logger)
	userUseCase := biz.NewUserUseCase(userRepo, transaction, configRepo, userInfoRepo, userRecommendRepo, locationRepo, userCurrentMonthRecommendRepo, userBalanceRepo, logger)
	ethUserRecordRepo := data.NewEthUserRecordRepo(dataData, logger)
	recordUseCase := biz.NewRecordUseCase(ethUserRecordRepo, locationRepo, userBalanceRepo, userRecommendRepo, userInfoRepo, configRepo, userCurrentMonthRecommendRepo, transaction, logger)
	appService := service.NewAppService(userUseCase, recordUseCase, logger, auth)
	httpServer := server.NewHTTPServer(confServer, appService, logger)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
